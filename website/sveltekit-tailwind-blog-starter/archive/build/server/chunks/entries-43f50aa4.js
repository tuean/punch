import { c as create_ssr_component } from './index-32db5bef.js';
import { c as config, u as user } from './config-85e7a33b.js';

// This module is generated by `script/`.
/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */
const regex = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;

/**
 * Generate a slug.
 *
 * Does not track previously generated slugs: repeated calls with the same value
 * will result in the exact same slug.
 * Use the `GithubSlugger` class to get unique slugs.
 *
 * @param  {string} value
 *   String of text to slugify
 * @param  {boolean} [maintainCase=false]
 *   Keep the current case, otherwise make all lowercase
 * @return {string}
 *   A unique slug string
 */
function slug (value, maintainCase) {
  if (typeof value !== 'string') return ''
  if (!maintainCase) value = value.toLowerCase();
  return value.replace(regex, '').replace(/ /g, '-')
}

const metadata$y = {
  "title": "HttpMessageConverter",
  "date": "2021-05-20",
  "tags": ["spring"],
  "image": "https://i.loli.net/2021/05/20/FpWJ9MoRzDeKr7N.jpg",
  "author": "tuean",
  "summary": "spring中http消息体转化工具"
};
const HttpMessageConverter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>HttpMessageConverter</h3>
<p>本文我们来讨论下spring中的HttpMessageConverter。
spring版本：5.3.4</p>
<h4>HttpMessageConverter</h4>
<p>首先我们来看下interface定义</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token comment">/**
 * Strategy interface for converting from and to HTTP requests and responses.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @author Rossen Stoyanchev
 * @since 3.0
 * @param &lt;T> the converted object type
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>

    
    <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">default</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">canRead</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">canWrite</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MediaType</span> contentType<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>根据注释及接口名称，可以看到该接口是用来转换http输入与输出；</p>
<p>接口提供了几个方法，可以很清晰的发现方法的作用：</p>
<ul><li>canRead  适配当前类型则可读</li>
<li>canWrite 适配当前类型则可写</li>
<li>getSupportedMediaTypes 返回当前类支持的媒体类型</li>
<li>read 读操作</li>
<li>write 写操作</li></ul>
<h4>如何配置</h4>
<p>开发者只需要实现该类即可提供不同类型的请求的适配。具体方式为通过实现<em>WebMvcConfigurer</em>接口进行配置。
例如笔者个人习惯使用<em>GsonHttpMessageConverter</em>，可通过以下配置进行HttpMessageConverter的配置。</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpMessageConverterConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> converters<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">HttpMessageConverter</span> converter <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">MappingJackson2XmlHttpMessageConverter</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>以上代码去除了springboot默认添加的<em>Jackson</em>及<em>FastJson</em>提供的HttpMessageConverter。</p>
<ol><li>springboot框架秉持开箱可用的基础理念，默认提供了以下几种消息转换器：</li>
<li>ByteArrayHttpMessageConverter – converts byte arrays</li>
<li>StringHttpMessageConverter – converts Strings</li>
<li>ResourceHttpMessageConverter – converts org.springframework.core.io.Resource for any type of octet stream</li>
<li>SourceHttpMessageConverter – converts javax.xml.transform.Source</li>
<li>FormHttpMessageConverter – converts form data to/from a MultiValueMap</li>
<li>Jaxb2RootElementHttpMessageConverter – converts Java objects to/from XML (added only if JAXB2 is present on the classpath)</li>
<li>MappingJackson2HttpMessageConverter – converts JSON (added only if Jackson 2 is present on the classpath)</li>
<li>MappingJacksonHttpMessageConverter – converts JSON (added only if Jackson is present on the classpath)</li>
<li>AtomFeedHttpMessageConverter – converts Atom feeds (added only if Rome is present on the classpath)</li>
<li>RssChannelHttpMessageConverter – converts RSS feeds (added only if Rome is present on the classpath)
以上默认提供的已经满足我们大部分情况下的业务使用情况。
</li></ol>
<h4>spring源码</h4>
<p>当我们使用默认配置或自定义配置时，spring读取请求对象操作可见<em>AbstractMessageConverterMethodArgumentResolver</em></p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Object</span> <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span>
			<span class="token class-name">Type</span> targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">&#123;</span>

		<span class="token class-name">MediaType</span> contentType<span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> noContentType <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			contentType <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidMediaTypeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			noContentType <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			contentType <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> contextClass <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getContainingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetType <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> targetType <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">ResolvableType</span> resolvableType <span class="token operator">=</span> <span class="token class-name">ResolvableType</span><span class="token punctuation">.</span><span class="token function">forMethodParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
			targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> resolvableType<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token class-name">HttpMethod</span> httpMethod <span class="token operator">=</span> <span class="token punctuation">(</span>inputMessage <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span><span class="token punctuation">)</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Object</span> body <span class="token operator">=</span> <span class="token constant">NO_VALUE</span><span class="token punctuation">;</span>

		<span class="token class-name">EmptyBodyCheckingHttpInputMessage</span> message<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyBodyCheckingHttpInputMessage</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converterType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> genericConverter <span class="token operator">=</span>
						<span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span> <span class="token operator">:</span>
						<span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> converter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						<span class="token class-name">HttpInputMessage</span> msgToUse <span class="token operator">=</span>
								<span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyRead</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
						body <span class="token operator">=</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span> <span class="token operator">:</span>
								<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> msgToUse<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
						body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEmptyBody</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">(</span><span class="token string">"I/O error while reading input message"</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">==</span> <span class="token constant">NO_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>httpMethod <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">SUPPORTED_METHODS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">)</span> <span class="token operator">||</span>
					<span class="token punctuation">(</span>noContentType <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span>
					<span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> targetClass <span class="token operator">:</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token class-name">MediaType</span> selectedContentType <span class="token operator">=</span> contentType<span class="token punctuation">;</span>
		<span class="token class-name">Object</span> theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>
		<span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">String</span> formatted <span class="token operator">=</span> <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token string">"Read ""</span> <span class="token operator">+</span> selectedContentType <span class="token operator">+</span> <span class="token string">"" to ["</span> <span class="token operator">+</span> formatted <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> body<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>请求头中的<em>Content-Type</em>参数匹配对应的消息转换器，若不存在则使用默认的<em>application/octet-stream</em>。
通过每个实现类中的canRead方法判断当前转换器是否匹配该请求，匹配上则调用read方法读取请求的实际对象。</p>
<p>spring操作返回对象则是使用<em>AbstractMessageConverterMethodProcessor</em></p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span>
			<span class="token class-name">ServletServerHttpRequest</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">ServletServerHttpResponse</span> outputMessage<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">&#123;</span>

		<span class="token class-name">Object</span> body<span class="token punctuation">;</span>
		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> valueType<span class="token punctuation">;</span>
		<span class="token class-name">Type</span> targetType<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">CharSequence</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			body <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			valueType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
			targetType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			body <span class="token operator">=</span> value<span class="token punctuation">;</span>
			valueType <span class="token operator">=</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
			targetType <span class="token operator">=</span> <span class="token class-name">GenericTypeResolver</span><span class="token punctuation">.</span><span class="token function">resolveType</span><span class="token punctuation">(</span><span class="token function">getGenericType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">,</span> returnType<span class="token punctuation">.</span><span class="token function">getContainingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isResourceType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			outputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_RANGES</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">RANGE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
					outputMessage<span class="token punctuation">.</span><span class="token function">getServletResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
				<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
					<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpRange</span><span class="token punctuation">></span></span> httpRanges <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					outputMessage<span class="token punctuation">.</span><span class="token function">getServletResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">PARTIAL_CONTENT</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					body <span class="token operator">=</span> <span class="token class-name">HttpRange</span><span class="token punctuation">.</span><span class="token function">toResourceRegions</span><span class="token punctuation">(</span>httpRanges<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
					valueType <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					targetType <span class="token operator">=</span> <span class="token constant">RESOURCE_REGION_LIST_TYPE</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					outputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_RANGE</span><span class="token punctuation">,</span> <span class="token string">"bytes */"</span> <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					outputMessage<span class="token punctuation">.</span><span class="token function">getServletResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">REQUESTED_RANGE_NOT_SATISFIABLE</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token class-name">MediaType</span> selectedMediaType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token class-name">MediaType</span> contentType <span class="token operator">=</span> outputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> isContentTypePreset <span class="token operator">=</span> contentType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contentType<span class="token punctuation">.</span><span class="token function">isConcrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>isContentTypePreset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Found 'Content-Type:"</span> <span class="token operator">+</span> contentType <span class="token operator">+</span> <span class="token string">"' in response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			selectedMediaType <span class="token operator">=</span> contentType<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> acceptableTypes <span class="token operator">=</span> <span class="token function">getAcceptableMediaTypes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> producibleTypes <span class="token operator">=</span> <span class="token function">getProducibleMediaTypes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> producibleTypes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">(</span>
						<span class="token string">"No converter found for return value of type: "</span> <span class="token operator">+</span> valueType<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> mediaTypesToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MediaType</span> requestedType <span class="token operator">:</span> acceptableTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MediaType</span> producibleType <span class="token operator">:</span> producibleTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>requestedType<span class="token punctuation">.</span><span class="token function">isCompatibleWith</span><span class="token punctuation">(</span>producibleType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						mediaTypesToUse<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getMostSpecificMediaType</span><span class="token punctuation">(</span>requestedType<span class="token punctuation">,</span> producibleType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mediaTypesToUse<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">(</span>producibleTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No match for "</span> <span class="token operator">+</span> acceptableTypes <span class="token operator">+</span> <span class="token string">", supported: "</span> <span class="token operator">+</span> producibleTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">sortBySpecificityAndQuality</span><span class="token punctuation">(</span>mediaTypesToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MediaType</span> mediaType <span class="token operator">:</span> mediaTypesToUse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>mediaType<span class="token punctuation">.</span><span class="token function">isConcrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					selectedMediaType <span class="token operator">=</span> mediaType<span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mediaType<span class="token punctuation">.</span><span class="token function">isPresentIn</span><span class="token punctuation">(</span><span class="token constant">ALL_APPLICATION_MEDIA_TYPES</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					selectedMediaType <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using '"</span> <span class="token operator">+</span> selectedMediaType <span class="token operator">+</span> <span class="token string">"', given "</span> <span class="token operator">+</span>
						acceptableTypes <span class="token operator">+</span> <span class="token string">" and supported "</span> <span class="token operator">+</span> producibleTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMediaType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			selectedMediaType <span class="token operator">=</span> selectedMediaType<span class="token punctuation">.</span><span class="token function">removeQualityValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token class-name">GenericHttpMessageConverter</span> genericConverter <span class="token operator">=</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span>
						<span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>
						<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span> <span class="token operator">:</span>
						converter<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span>
							<span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
							inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						<span class="token class-name">Object</span> theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>
						<span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-></span>
								<span class="token string">"Writing ["</span> <span class="token operator">+</span> <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token function">addContentDispositionHeader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
							genericConverter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">&#125;</span>
						<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
							<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">&#125;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
							logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Nothing to write: null body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">&#125;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">return</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> producibleMediaTypes <span class="token operator">=</span>
					<span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> inputMessage<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
							<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token constant">PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>isContentTypePreset <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>producibleMediaTypes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">(</span>
						<span class="token string">"No converter for ["</span> <span class="token operator">+</span> valueType <span class="token operator">+</span> <span class="token string">"] with preset Content-Type '"</span> <span class="token operator">+</span> contentType <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">(</span><span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>根据请求与代码找到可能的MediaType，根据系统配置的<code>List&lt;HttpMessageConverter&gt;</code>找到支持的转换器并进行转换。</p>
<h4>参考文档</h4>`;
});
const __vite_glob_0_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: HttpMessageConverter,
  metadata: metadata$y
}, Symbol.toStringTag, { value: "Module" }));
const metadata$x = {
  "title": "accessException",
  "date": "2019-11-18",
  "draft": false,
  "summary": "The creators of HBO's Silicon Valley could have glossed over the breakthrough technology behind fictional start-up Pied Piper...",
  "tags": ["idea", "problem", "Technology"],
  "image": "https://www.diyimei.net/upload/2018/1523093805792748.jpg",
  "author": "tuean"
};
const AccessException = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>idea出现 cann’t access class in the package</h3>
<p>今天在公司日常写代码过程选中，发现自己项目结构有问题；
在进行一连串java文件的复制、剪切。黏贴后，重新进行maven的package操作时，发现项目中有报出类找不到的情况；
在这里简单记录一下排查过程</p>
<h3>1. 尝试自动修复</h3>
<p>首先删除报错的import
再尝试通过idea自动化工具修复，在mac环境下为<strong>option + enter</strong>，若有出现import即可自动导入</p>
<h3>2. 项目package确认</h3>
<p>由于是通过idea提供的自助话工具进行包名、类名、参数名的自动替换，首先核对下报错类的package是否正常
特别注意拼写错误</p>
<h3>3. modules配置确认</h3>
<p>打开Project Structure，在modules栏目中查看是否正确定义sources文件夹，注意根目录</p>
<h3>4. 清理maven</h3>
<p>maven clean</p>
<h3>5. 清楚idea缓存</h3>
<p>通过File -&gt; Invalidate Caches / Restart， 选择 Invalidate and start清理缓存并重启idea</p>`;
});
const __vite_glob_0_1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: AccessException,
  metadata: metadata$x
}, Symbol.toStringTag, { value: "Module" }));
const metadata$w = {
  "title": "apollo重复key",
  "date": "2023-04-10",
  "tags": ["apollo"],
  "cover": null,
  "author": "tuean",
  "draft": false,
  "summary": "apollo出现重复key的处理办法"
};
const ApollouE9u87u8DuE5uA4u8Dkey = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2>apollo重复key</h2>
<p>当apollo中出现多个namespace中存在相同的key，官方使用方式为根据namespace排序，取最前面的记录。</p>
<p>当我们希望覆盖该规则时，直接代码中调整指定namespace下的参数。</p>
<h3>思路</h3>
<h3>项目调整</h3>
<h4>1.修改DefaultConfig.java</h4>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>internals</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span> <span class="token keyword">implements</span> <span class="token class-name">RepositoryChangeListener</span> <span class="token punctuation">&#123;</span>
	
	<span class="token comment">// 添加以下代码</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> local_rename_map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
		local_rename_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"old_key"</span><span class="token punctuation">,</span> <span class="token string">"new_key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">needRewriteKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_namespace<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"your_namespace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceRropertiesKey</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">needRewriteKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>local_rename_map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token class-name">String</span> nextKey <span class="token operator">=</span> local_rename_map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nextKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
					properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>nextKey<span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					properties<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
					logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"use key &#123;&#125; replace &#123;&#125;"</span><span class="token punctuation">,</span> nextKey<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span> 
	
	
	<span class="token comment">// 修改以下方法</span>
	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateConfig</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> newConfigProperties<span class="token punctuation">,</span> <span class="token class-name">ConfigSourceType</span> sourceType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">replaceRropertiesKey</span><span class="token punctuation">(</span>newConfigProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ConfigChange</span><span class="token punctuation">></span></span> <span class="token function">updateAndCalcConfigChanges</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> newConfigProperties<span class="token punctuation">,</span> <span class="token class-name">ConfigSourceType</span> sourceType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">replaceRropertiesKey</span><span class="token punctuation">(</span>newConfigProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h4>2. 打印出所有当前信息</h4>
<p>新建ApolloEnvironmentPostProcessor.java</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApolloEnvironmentPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ApolloEnvironmentPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CompositePropertySource</span> source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CompositePropertySource</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ApolloBootstrapPropertySources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">COnfigPropertySource</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">COnfigPropertySource</span><span class="token punctuation">)</span> source<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-></span> n<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"your_namespace"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> ps<span class="token punctuation">.</span><span class="token function">getPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;, &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>修改main方法</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;new_key&#125;"</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> v<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@PostConstruct</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   	 	logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"new value:&#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        application<span class="token punctuation">.</span><span class="token function">addInitializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApolloEnvironmentPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        appplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ApollouE9u87u8DuE5uA4u8Dkey,
  metadata: metadata$w
}, Symbol.toStringTag, { value: "Module" }));
const metadata$v = {
  "title": "chrome",
  "date": "2021-05-17",
  "tags": ["chrome"],
  "image": "https://i.loli.net/2021/05/17/NJQFOBogkwTlvHZ.jpg",
  "author": "tuean",
  "draft": false,
  "summary": "chrome使用技巧"
};
const ChromeuE4uBDuBFuE7u94uA8uE5uB0u8FuE6u8Au80uE5uB7uA7 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>chrome使用技巧</h3>
<h4>调整分辨率</h4>
<p>windows下：</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">control + / + '+ or -'</code>`}<!-- HTML_TAG_END --></pre>
<p>max下</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">command + / + '+ or -'</code>`}<!-- HTML_TAG_END --></pre>
<p>以上指令还可以调整控制台的分辨率，只要在输入按键前点击下控制台（将焦点focus到控制台），再输入上述按键即可</p>
<blockquote><p>edge也支持上述指令</p></blockquote>
<h4>调整配置（实验功能）</h4>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">chrome://flags</code>`}<!-- HTML_TAG_END --></pre>
<h4>console输出自定义格式</h4>
<pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span>
            <span class="token string">"background: white; color: red; font-size: 10px;"</span><span class="token punctuation">,</span>
            <span class="token string">"警告！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<h4>命令模式</h4>
<p>windows下：</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">control + shift + p</code>`}<!-- HTML_TAG_END --></pre>
<p>max下</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">command + shift + p</code>`}<!-- HTML_TAG_END --></pre>
<h3>页面转二维码（原生支持，非插件）</h3>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">chrome://flags</code>`}<!-- HTML_TAG_END --></pre>
<p>搜索qr，选中enable即可</p>
<h3>移动端调试</h3>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">edge://inspect/#devices</code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ChromeuE4uBDuBFuE7u94uA8uE5uB0u8FuE6u8Au80uE5uB7uA7,
  metadata: metadata$v
}, Symbol.toStringTag, { value: "Module" }));
const metadata$u = {
  "title": "ckeditor",
  "date": "2019-10-30",
  "tags": ["前端", "problem"],
  "image": "https://i.loli.net/2019/10/30/bpQnviZ3TAN8Pgm.jpg",
  "draft": false,
  "summary": "ckeditor 图片上传修改",
  "author": "tuean"
};
const Ckeditor = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>ckeditor 图片上传修改</h3>
<h4>背景</h4>
<p>公司使用<strong>ckeditor</strong>作为富文本空间，最近发现图片上传时，在链接返回后需要过一段时间才能访问到图片</p>
<p>询问文件服务同事因对接原因无法处理，我这边决定从前端进行校验</p>
<h4>源码位置</h4>
<p>图片上传失败会显示一个红色图片（noimage.png），此处通过该图片找到对应代码位置为 </p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">ckeditor/plugins/image/dialogs/image.js </code>`}<!-- HTML_TAG_END --></pre>
<p>观察此处为处理图片异常逻辑，替换原有链接为 noimage.png </p>
<h4>修改方案</h4>
<p>首先通过js判断图片是否存在</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">check_image_exist</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    image <span class="token operator">=</span> src
   
    <span class="token keyword">if</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> image<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>其次将原有代码封装为新函数<strong>oldFunction()</strong></p>
<p>添加定时器，进行一定延时后循环判断文件是否可访问
代码大致思路如下</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">let</span> gap_time <span class="token operator">=</span> <span class="token number">300</span>
<span class="token keyword">let</span> max_count <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> find <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> gap<span class="token punctuation">)</span>
<span class="token keyword">let</span> src <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">function</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>find <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">></span> find<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> newSrc <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"?t"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 设置新src 加上随机数强制页面重新加载图片</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_image_exist</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      find <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> max_count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      <span class="token function">oldFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Ckeditor,
  metadata: metadata$u
}, Symbol.toStringTag, { value: "Module" }));
const metadata$t = {
  "title": "cors-repeat",
  "date": "2020-05-22",
  "tags": ["cors"],
  "image": "https://i.loli.net/2019/10/30/bpQnviZ3TAN8Pgm.jpg",
  "author": "tuean",
  "draft": false,
  "summary": "跨域理解"
};
const Cors_repeat = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>跨域请求头</h3>
<h4>什么叫跨域</h4>
<p>简单来说，当浏览器前端去访问另一个源（协议+域名+端口）下的资源，即为跨域</p>
<h4>为什么会出现跨域问题</h4>
<p>浏览器根据安全策略，默认禁止跨域行为</p>
<h4>如何解决跨域问题</h4>
<ol><li>jsoup</li>
<li>cors </li></ol>
<h5>1. jsoup</h5>
<p>利用加载js、html等静态资源的方式进行跨域通信（不够灵活，不在本文讨论范围）</p>
<h5>2. cors</h5>
<p>返回头信息告知浏览器允许跨域</p>
<p>即添加</p>
<pre class="language-properties"><!-- HTML_TAG_START -->${`<code class="language-properties"><span class="token key attr-name">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token value attr-value">$&#123;请求头中的Origin&#125; or *（任一，一般不适用）</span>
<span class="token key attr-name">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token value attr-value">true or false 是否允许携带cookie，当设置为true时，allow-Origin不允许设置为*</span>
<span class="token key attr-name">Access-Control-Allow-Headers：</span> <span class="token value attr-value">Content-Type,etc 允许的请求头 任意</span>
<span class="token key attr-name">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token value attr-value">GET,POST  等请求方法</span></code>`}<!-- HTML_TAG_END --></pre>
<p>至返回头信息中即可完成跨域配置。</p>
<blockquote><p>注意：当请求存在调用链时，有可能下游或上游服务已添加跨域设置，为避免错误，以下参数必须且仅能被设置一次，需要在代码块中进行特殊处理</p>
<ul><li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li></ul></blockquote>
<h4>实现方式-nginx</h4>
<pre class="language-conf"><!-- HTML_TAG_START -->${`<code class="language-conf">server &#123;
    listen     8888;
    location / &#123;

        add_header Access-Control-Allow-Origin &quot;$http_origin&quot; always;
        add_header Access-Control-Allow-Headers &#39;ycas_token,Content-Type,X-Requested-WIth,Origin,Accept,Authorization,req_id,wx_code&#39; always;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods &#39;GET,POST,DELETE,PUT,OPTIONS&#39; always;

        if ($request_method = &#39;OPTIONS&#39;) &#123;
           return 200;
        &#125;


        proxy_http_version     1.1;
        proxy_set_header       Host                      $host:$server_port;
        proxy_set_header       X-Real-IP                 $remote_addr;
        proxy_set_header       X-Forwarded-For           $proxy_add_x_forwarded_for;
        proxy_pass http://yourService/;
    &#125;
&#125;</code>`}<!-- HTML_TAG_END --></pre>
<h4>实现方式-代码实现</h4>
<p>后端项目通用逻辑：拦截请求，根据请求信息修改返回头；
对于java spring项目而言，可以通过添加Filter或Interceptor拦截请求，修改返回头，匹配请求方式为OPTIONS时直接返回；</p>`;
});
const __vite_glob_0_5 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Cors_repeat,
  metadata: metadata$t
}, Symbol.toStringTag, { value: "Module" }));
const metadata$s = {
  "title": "css-demo-star",
  "date": "2020-02-25",
  "tags": ["css", "前端"],
  "image": "https://i.loli.net/2021/02/18/eDrMmaJvkguslIV.jpg",
  "draft": false,
  "author": "tuean",
  "summary": "一个星空demo的学习"
};
const Css_demo_star = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>一个星空demo的学习</h3>
<p>最近在家上班，生活作息已经混乱了，大半夜刷b站看到了一个自制星空背景的css样式视频</p>
<p>由于个人后端出生，对能写好css的人非常崇拜（就像碰到光速QA的上帝一样）</p>
<p>一时兴起，关注了该<a href="https://github.com/LinCyJang/vue-css-demo" rel="noopener noreferrer" target="_blank">github仓库</a>，以此学习一波</p>
<h4>js部分</h4>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> stars <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span> <span class="token comment">/*星星的密集程度，数字越大越多*/</span>
            <span class="token keyword">var</span> $stars <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".stars"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span> <span class="token comment">/*星星的看起来的距离,值越大越远,可自行调制到自己满意的样子*/</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stars<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> $star <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;div/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$star<span class="token punctuation">)</span>
                $stars<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$star<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".star"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> cur <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0.2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> curR <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">transformOrigin</span><span class="token operator">:</span> <span class="token string">"0 0 "</span> <span class="token operator">+</span> curR <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">" translate3d(0,0,-"</span> <span class="token operator">+</span> curR <span class="token operator">+</span> <span class="token string">"px) rotateY("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"deg) rotateX("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"deg) scale("</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">")"</span>

                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>js部分负责星星的创建，并添加</p><p>star</p><p>的样式，该样式主要用到了两个css属性</p>
<ul><li>transformOrigin： 修改元素旋转变形的原点
0 0 curR px分别代表 x y z 轴</li>
<li>transform： 进行元素的旋转
其中<ul><li>translate3d： 在3D空间内移动一个元素的位置</li>
<li>rotateY： 元素绕垂直轴旋转</li>
<li>rotateX： 元素绕水平轴旋转</li>
<li>deg： 旋转的角度</li>
<li>scale： 缩放</li></ul></li></ul>
<h4>css部分</h4>
<ul><li>radial-gradient: 从原点辐射开的颜色渐变组成的图片</li>
<li>background-attachment： 确定背景图片在视口内固定或随它的区块的滚动而滚动，此处fix代表背景不旋转</li>
<li>perspective： 指定了观察者与 z=0 平面的距离，使具有三维位置变换的元素产生透视效果
这个属性没了解作者的意图</li>
<li>transform-style: 设置元素的子元素是位于 3D 空间中还是平面中</li>
<li>perspective-origin： 指定了观察者的位置，并且该属性会导致perspective属性失效</li>
<li>animation： 定义元素的动画效果 动画需要如下@keyframes定义</li>
<li>@keyframes： 定义动画的动作</li>
<li>backface-visibility： 当元素背向观察者时元素是否可见</li></ul>
<h4>整体</h4>
<p>背景图通过radial-gradient属性进行夜幕的颜色渲染
所有的星星作为一整个元素，通过perspective-origin调整观察者位置，添加animation动画效果使其产生动画效果
每个星星使用随机数定义大小、位置等</p>`;
});
const __vite_glob_0_6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Css_demo_star,
  metadata: metadata$s
}, Symbol.toStringTag, { value: "Module" }));
const metadata$r = {
  "title": "daterangepicker-position-problem",
  "date": "2019-12-20",
  "tags": ["daterangepicker"],
  "image": "http://www.005.tv/uploads/allimg/180508/13-1P50QK509147.jpg",
  "summary": "daterangepicker 定位问题",
  "draft": false,
  "author": "tuean"
};
const Daterangepicker_position_problem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>daterangepicker 定位问题</h3>
<h4>原因</h4>
<p>今天同事在一个老项目开发中发现了<strong>daterangerpicker</strong>生成出来的日期选择器固定在了页面元素，并没有随modal框的滚动而跟随其输入框滚动</p>
<h3>解决过程</h3>
<p>首先查看js代码是否有异常出现，无
想到元素生成正常而定位异常，猜测是其动态生成的dom元素的<strong>position</strong>元素的问题，查看新生成元素样式</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">position:absolute</code>`}<!-- HTML_TAG_END --></pre>
<p>无异常</p>
<p>继而查看其父元素无定位元素，给其加上</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">position: relative</code>`}<!-- HTML_TAG_END --></pre>
<p>仍显示异常，查阅官方文档及stackoverflow，发现一重要参数</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">parentEl</code>`}<!-- HTML_TAG_END --></pre>
<p>根据官方定义</p>
<blockquote><p>parentEl: (string) jQuery selector of the parent element that the date range picker will be added to, if not provided this will be ‘body’</p></blockquote>
<p>如果不设置，父元素将为body <br></p>
<p>将其绑定为对应生成元素的父元素（即上述添加 position:relative）</p>
<p>problem solved</p>
<blockquote><ol><li><a href="https://stackoverflow.com/questions/56964857/dropdown-menu-doesnt-stay-in-place-when-scrolling" rel="noopener noreferrer" target="_blank">stackoverflow</a></li>
<li><a href="https://github.com/dangrossman/daterangepicker" rel="noopener noreferrer" target="_blank">github</a></li>
<li><a href="http://www.daterangepicker.com/#options" rel="noopener noreferrer" target="_blank">官方文档</a></li></ol></blockquote>`;
});
const __vite_glob_0_7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Daterangepicker_position_problem,
  metadata: metadata$r
}, Symbol.toStringTag, { value: "Module" }));
const metadata$q = {
  "title": "dubbo-filter-config",
  "date": "2020-04-03",
  "tags": ["dubbo"],
  "image": "https://i.loli.net/2021/02/18/QZqbp94dkczXo3M.jpg",
  "draft": false,
  "author": "tuean",
  "summary": "dubbo filter 在idea中的配置问题"
};
const Dubbo_filter_config = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>dubbo filter 在idea中的配置问题</h3>
<p>公司目前使用到dubbo作为rpc调用的框架，但当前对于监控这块暂无对应实现</p>
<p>前几天接到领导指示，需要提供rpc调用日志监控的sdk功能包</p>
<p>查询了一下官网，类同于添加http请求日志的监控，可利用dubbo filter即可实现改功能:</p>
<p><a href="http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html" rel="noopener noreferrer" target="_blank">dubbo filter</a></p>
<p>但是通过配置改完后，发现代码并不生效，怀疑对应的filter并没有正确加载，通过debug找到对应实现类：</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">org.apache.dubbo.common.extension.ExtensionLoader#loadDirectory</code>`}<!-- HTML_TAG_END --></pre>
<p>观察到对应的加载语句</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java">urls <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<p>此时urls.hasMoreElements()为false，故而无法触发if下的 loadResource 方法，进而没有加载进入我们的filter</p>
<p>仔细观察，该fileName为 </p><p>/META-INF/dubbo/xxx.xxx</p><p></p>
<p>需要文件对应的层级为</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">-- META-INF
-----dubbo
--------xxx.xxx</code>`}<!-- HTML_TAG_END --></pre>
<p>而在idea中，创建多层文件夹时，文件分割符为英文句号，即</p><p>.</p><p></p>
<p>并且当仅有一子目录时，自动拼接至上层目录，</p>
<p>而当我们创建目录时，输入</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">META-INF.dubbo</code>`}<!-- HTML_TAG_END --></pre>
<p>idea默认帮助我们创建名为上述text的文件夹，并没有自动切分并创建子文件夹</p>
<p>所以dubbo没有找到对应的配置文件，也就没有办法加载我们指定的filter了</p>`;
});
const __vite_glob_0_8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Dubbo_filter_config,
  metadata: metadata$q
}, Symbol.toStringTag, { value: "Module" }));
const metadata$p = {
  "title": "fileReader-readAsDataUrl",
  "date": "2019-12-31",
  "tags": ["前端"],
  "image": "https://i.loli.net/2019/10/30/bpQnviZ3TAN8Pgm.jpg",
  "summary": "fileReader使用",
  "author": "tuean"
};
const FileReader_readAsDataUrl = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3></h3>
<p>承接上文 <a href="content/postsbg/ckeditor.mdbg/ckeditor.md">图片上传回显问题前端修复</a></p>
<br>
<p>最近又在另一项目中发现了这一问题，继续使用前端轮训获取感觉体验不佳，询问前端专业小伙伴后，推荐使用<strong>FileReader</strong>直接展示本地文件</p>
<blockquote><p>当然，使用本地图片需要有如下前提：</p>
<ol><li>后端端口上传结果可信，成功即文件上传ok</li>
<li>本地浏览器版本要求较新</li></ol></blockquote>
<p>根据官方文档，了解到<strong>FileReader</strong>支持将文件转为url地址，具体可见<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL" rel="noopener noreferrer" target="_blank">https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL</a></p>
<p>根据如上文档，去除了原先onerror处相关方法，只需修改原有ajax代码如下：</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> newUrl <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token comment">// your code</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h4>总结</h4>
<p>总结一下
在技术这一层面，该实现方法较为简单，代码量不大，且客户使用体验较好；</p>
<br>
排除技术来说，作为一名开发，在碰到问题时的思路可能就显得比较笨拙，偏向于向一个方向死磕，效率低下且毫无成就感可言，
借此案例，希望时刻提醒自己，要善于动脑，从不同角度发现和解决问题，世界上其实有很多的路。`;
});
const __vite_glob_0_9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: FileReader_readAsDataUrl,
  metadata: metadata$p
}, Symbol.toStringTag, { value: "Module" }));
const metadata$o = {
  "title": "hexo配合github搭建博客",
  "date": "2019-10-09",
  "tags": ["hexo", "github"],
  "cover": "https://i.loli.net/2019/10/30/4KvzoaEV21nQwjM.jpg",
  "comments": true,
  "author": "tuean",
  "summary": "hexo + github pages 搭建博客"
};
const Hexo = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2>hexo + github pages 搭建博客</h2>
<h2>软件安装</h2>
<h3>1. nodejs (hexo依赖nodejs， 已安装可跳过)</h3>
<ul><li>windows/mac 进入<a href="https://nodejs.org/en/" rel="noopener noreferrer" target="_blank">node官方网址</a>下载最新版并安装</li>
<li>mac环境下可通过包管理器安装<ol><li>安装homebrew<a href="https://brew.sh/" rel="noopener noreferrer" target="_blank">官网</a> 或者通过以下命令<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> /usr/bin/ruby <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span></code>`}<!-- HTML_TAG_END --></pre></li>
<li>通过homebrew安装node<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> brew <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">node</span></code>`}<!-- HTML_TAG_END --></pre></li>
<li>每次执行homebrew后都会先执行update 目前由于各种原因耗时很大，可通过以下命令关闭<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_NO_AUTO_UPDATE</span><span class="token operator">=</span>true</code>`}<!-- HTML_TAG_END --></pre></li>
<li>验证是否安装完成   <pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token function">node</span> <span class="token parameter variable">-v</span></code>`}<!-- HTML_TAG_END --></pre></li></ol></li></ul>
<h4>2. git (已安装可跳过)</h4>
<ul><li>windows下 <a href="https://git-scm.com/download/win" rel="noopener noreferrer" target="_blank">官网</a></li>
<li>mac下 <ol><li>安装<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> homebrew <span class="token function">install</span> <span class="token function">git</span></code>`}<!-- HTML_TAG_END --></pre></li>
<li>校验<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token function">git</span> <span class="token parameter variable">--version</span></code>`}<!-- HTML_TAG_END --></pre></li></ol></li></ul>
<h4>3. 安装hexo</h4>
<ol><li>通过npm安装<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token function">npm</span> i <span class="token parameter variable">-g</span> hexo</code>`}<!-- HTML_TAG_END --></pre></li>
<li>校验<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo <span class="token parameter variable">-v</span></code>`}<!-- HTML_TAG_END --></pre></li></ol>
<h3>github项目创建</h3>
<h4>1. 博客源码仓库</h4>
<ul><li>本文中记作 <strong>blog-source</strong></li>
<li>保存hexo工作环境</li></ul>
<h4>2. 博客内容仓库</h4>
<ul><li>本文中记作 <strong>blog</strong></li>
<li>输出结果保存</li>
<li>settings &gt; github pages 勾选</li></ul>
<h3>hexo使用</h3>
<h4>1. 初始化</h4>
<ol><li>选择一 <strong>空</strong> 文件夹 例如 <strong>blog</strong></li>
<li>命令行进入上述文件夹 </li>
<li>hexo初始化<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash">hexo init</code>`}<!-- HTML_TAG_END --></pre></li>
<li>完成后可见生成了对应的一系列文件，简单说明<ul><li>source文件夹   文档内容</li>
<li>themes文件夹   主题</li>
<li>_config.yml    hexo配置文件</li>
<li>CNAME          配置域名所需 需要手动创建</li>
<li>package.json   webpack配置文件</li></ul></li></ol>
<h4>2. hexo配置文件修改</h4>
<ol><li>修改 <strong># Site</strong><pre class="language-yaml"><!-- HTML_TAG_START -->${`<code class="language-yaml"> <span class="token key atrule">title</span><span class="token punctuation">:</span> title
 <span class="token key atrule">descprition</span><span class="token punctuation">:</span> des
 <span class="token punctuation">...</span></code>`}<!-- HTML_TAG_END --></pre></li>
<li>修改 <strong># Deployment</strong><pre class="language-yaml"><!-- HTML_TAG_START -->${`<code class="language-yaml"> <span class="token key atrule">deploy</span><span class="token punctuation">:</span> 
   <span class="token key atrule">type</span><span class="token punctuation">:</span> git
   <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
   <span class="token key atrule">repo</span><span class="token punctuation">:</span> blog github地址</code>`}<!-- HTML_TAG_END --></pre></li></ol>
<h4>3. hexo使用</h4>
<ul><li>创建文件<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo new fileName</code>`}<!-- HTML_TAG_END --></pre></li>
<li>清理文件<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo clean</code>`}<!-- HTML_TAG_END --></pre></li>
<li>生成文件<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo g</code>`}<!-- HTML_TAG_END --></pre></li>
<li>本地预览 http://localhost:4000<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo s</code>`}<!-- HTML_TAG_END --></pre></li>
<li>结果发布<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> hexo d
&#96;&#96;&#96;
<span class="token operator">></span> 推送成功后即可在 **blog** 仓库发现最新生成文件
</code>`}<!-- HTML_TAG_END --></pre></li></ul>
<h3>发布流程简述</h3>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash">hexo clean
hexo g
hexo d</code>`}<!-- HTML_TAG_END --></pre>
<h3>域名绑定</h3>
<ol><li>github pages配置页面填写对应域名，例如本站 <strong>tuean.cn</strong></li>
<li>在hexo工作目录下新建 <strong>CNAME</strong> 文件，不需要任何后缀名，输入域名保存</li>
<li>_config.yml中修改 <strong># Url</strong><pre class="language-yaml"><!-- HTML_TAG_START -->${`<code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> 域名
<span class="token key atrule">root</span><span class="token punctuation">:</span> 子目录 无子目录输入 /</code>`}<!-- HTML_TAG_END --></pre></li></ol>
<h3>主题</h3>
<h4>1. 来源</h4>
<p><a href="https://hexo.io/themes/" rel="noopener noreferrer" target="_blank">主题仓库</a></p>
<h4>2. 安装主题，以<a href="https://github.com/jerryc127/hexo-theme-butterfly" rel="noopener noreferrer" target="_blank">hexo-theme-butterfly</a>为例</h4>
<ol><li><p>项目根目录下</p>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token function">git</span> clone <span class="token parameter variable">-b</span> master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</code>`}<!-- HTML_TAG_END --></pre></li>
<li><p>修改项目 <strong>_config.yml</strong> 中的 <strong># theme</strong></p>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> theme: Butterfly</code>`}<!-- HTML_TAG_END --></pre></li>
<li><p>安装依赖</p>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"> <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-jade hexo-renderer-stylus <span class="token parameter variable">--save</span> or <span class="token function">yarn</span> <span class="token function">add</span> hexo-renderer-jade hexo-renderer-stylus
 <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code>`}<!-- HTML_TAG_END --></pre>
<blockquote><p>注意 需要在hexo主目录下安装</p></blockquote></li>
<li><p>自定义
进入 <strong>theme/Butterfly</strong> 下的 <strong>_config</strong>
自行按照爱好设定</p></li></ol>
<h3>生成sitemap</h3>
<p><a href="https://knktc.com/2021/06/26/hexo-use-github-actions-to-submit-sitemap/" rel="noopener noreferrer" target="_blank">配置github action</a></p>
<p>google</p>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap <span class="token parameter variable">--save</span></code>`}<!-- HTML_TAG_END --></pre>
<p>baidu</p>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap <span class="token parameter variable">--save</span></code>`}<!-- HTML_TAG_END --></pre>
<h2>备份</h2>
<ul><li>源码全部提交到 <strong>blog-source</strong> 仓库</li></ul>
<h2>问题</h2>
<p>Q: 项目启动后显示白屏</p>
<p>A: 查看 theme 文件夹下所使用的资源文件是否未提交 </p>
<p>Q: git not found </p>
<p>A: 执行 npm install hexo-deployer-git –save</p>
<p>Q: git auth fail </p>
<p>A: 修改本地git全局配置
git config –global user.name xxx
git config –global user.email xxx</p>`;
});
const __vite_glob_0_10 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Hexo,
  metadata: metadata$o
}, Symbol.toStringTag, { value: "Module" }));
const metadata$n = {
  "title": "html2canvas",
  "date": "2022-03-27",
  "tags": ["html2canvas"],
  "author": "tuean",
  "summary": "移动端截图功能"
};
const Html2canvas = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>html2canvas</h3>
<h4>需求背景</h4>
<p>家里领导接到一个需求，需要在移动端对某个页面进行截图，并对截图后的图片外层添加外层背景及公司logo，并进行分享</p>
<h4>技术方案</h4>
<p>将html元素转为HTMLCanvasElement可使用：<a href="https://github.com/niklasvh/html2canvas" rel="noopener noreferrer" target="_blank">html2canvas</a></p>
<p>HTMLCanvasElement 元素可通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" rel="noopener noreferrer" target="_blank">toDataURL</a> 方法转为base64</p>
<p>获取到base64后，赋予img元素即可展示或调用后端接口进行分享</p>
<h4>问题记录</h4>
<ol><li><p>元素需要缩小，并添加背景</p>
<ul><li>transform scale方案<pre class="language-css"><!-- HTML_TAG_START -->${`<code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.95<span class="token punctuation">,</span> 0.95<span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>即</li>
<li>margin方案</li></ul></li>
<li><p>页面元素过长，无法截图</p>
<p>发现截图后返回的base字符串为 <em>data:,</em>；</p>
<p>由于没有在日志中发现报错信息，排查是否为api问题；</p>
<p>阅读 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#return_value" rel="noopener noreferrer" target="_blank">return value</a> 中的</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">If the height or width of the canvas is 0 or larger than the maximum canvas size, the string "data:," is returned.</code>`}<!-- HTML_TAG_END --></pre>
<p>确定了原因，当页面过长，element过多，转换后的canvas高度或宽度超过当前浏览器限制，从而导致生成结果失效；</p>
<p>我们可使用 <a href="https://github.com/jhildenbiddle/canvas-size" rel="noopener noreferrer" target="_blank">canvas-size</a> 进行判断；</p></li>
<li><p>结果中出现文字重叠</p>
<p>当前使用</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">1.0.0</code>`}<!-- HTML_TAG_END --></pre>
<p>升级至最新（1.4.1）</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">1.4.1</code>`}<!-- HTML_TAG_END --></pre>
<p>即解决</p></li></ol>`;
});
const __vite_glob_0_11 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Html2canvas,
  metadata: metadata$n
}, Symbol.toStringTag, { value: "Module" }));
const metadata$m = {
  "title": "idea启动失败",
  "date": "2020-03-17",
  "tags": ["idea", "problem"],
  "image": "https://i.loli.net/2021/02/18/P4YgnEz2u1sCty5.jpg",
  "author": "tuean",
  "draft": false,
  "summary": "idea启动失败解决思路"
};
const IdeauE5u90uAFuE5u8AuA8uE5uA4uB1uE8uB4uA5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>idea启动失败</h3>
<p>idea打开无反应的处理方式</p>
<ol><li>找到idea根目录下bin文件夹 windows环境下为idea.bat </li>
<li>编辑该文件 在最后添加<pre class="language-cmd"><!-- HTML_TAG_START -->${`<code class="language-cmd">pause</code>`}<!-- HTML_TAG_END --></pre></li>
<li>双击执行 本次爆出<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">Initial heap size set to a larger value than the maximum heap size</code>`}<!-- HTML_TAG_END --></pre></li>
<li>按照搜索引擎查询的，修改bin目录下的.vmoptions文件，调整Xmx、Xms的大小（注意Xmx的大小要比Xms小）</li>
<li>一般来说，调整完成后即可恢复正常打开</li>
<li>若仍无法打开，使用everything搜索以下的文件名<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">.vmoptions</code>`}<!-- HTML_TAG_END --></pre></li>
<li>可以找到系统用户目录下存在另一份配置文件<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">C:Users&#123;user&#125;.IntelliJIdea2019.3configidea64.exe.vmoptions</code>`}<!-- HTML_TAG_END --></pre></li>
<li>该文件中第一行注释表示其为默认配置<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text"># custom IntelliJ Idea VM options</code>`}<!-- HTML_TAG_END --></pre></li>
<li>修改该文件的Xms、Xmx值即可</li></ol>
<h4>资料参考</h4>
<ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360004331580-Afte-2019-2-update-IntelliJ-fails-to-start-in-Windows?flash_digest=9c94f709c65b9fe387a6fd154209a564d7a00f11" rel="noopener noreferrer" target="_blank">idea support</a></li></ul>`;
});
const __vite_glob_0_12 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: IdeauE5u90uAFuE5u8AuA8uE5uA4uB1uE8uB4uA5,
  metadata: metadata$m
}, Symbol.toStringTag, { value: "Module" }));
const metadata$l = {
  "title": "jvm_dns_cache",
  "date": "2022-06-23",
  "tags": ["java", "dns"],
  "image": "https://image-1256217908.cos.ap-shanghai.myqcloud.com/20220626124942.png",
  "author": "tuean",
  "draft": false,
  "summary": "jvm中的dns缓存使用"
};
const Jvm_dns_cache = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2>jvm中的dns缓存使用</h2>
<blockquote><p>当前版本 jdk8</p></blockquote>
<h3>参数配置</h3>
<p>google后发现可通过<em>networkaddress.cache.ttl</em>与<em>sun.net.inetaddr.ttl</em>参数进行jvm级别的配置。</p>
<p>查寻jdk源码，相关代码都存放于</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">InetAddressCachePolicy</code>`}<!-- HTML_TAG_END --></pre>
<p>其主要逻辑位于static代码块中</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"> <span class="token comment">// Controls the cache policy for successful lookups only</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> cachePolicyProp <span class="token operator">=</span> <span class="token string">"networkaddress.cache.ttl"</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> cachePolicyPropFallback <span class="token operator">=</span>
        <span class="token string">"sun.net.inetaddr.ttl"</span><span class="token punctuation">;</span>

<span class="token comment">// Controls the cache policy for negative lookups only</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> negativeCachePolicyProp <span class="token operator">=</span>
        <span class="token string">"networkaddress.cache.negative.ttl"</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> negativeCachePolicyPropFallback <span class="token operator">=</span>
        <span class="token string">"sun.net.inetaddr.negative.ttl"</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_POSITIVE</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> tmp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>
              <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span>doPrivileged <span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">return</span> <span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>cachePolicyProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// ignore</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cachePolicy <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cachePolicy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cachePolicy <span class="token operator">=</span> <span class="token constant">FOREVER</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            propertySet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            tmp <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span>doPrivileged
                <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span>GetIntegerAction</span><span class="token punctuation">(</span>cachePolicyPropFallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cachePolicy <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cachePolicy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    cachePolicy <span class="token operator">=</span> <span class="token constant">FOREVER</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                propertySet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">/* No properties defined for positive caching. If there is no
                 * security manager then use the default positive cache value.
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    cachePolicy <span class="token operator">=</span> <span class="token constant">DEFAULT_POSITIVE</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>
              <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span>doPrivileged <span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">return</span> <span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>negativeCachePolicyProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// ignore</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            negativeCachePolicy <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>negativeCachePolicy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                negativeCachePolicy <span class="token operator">=</span> <span class="token constant">FOREVER</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            propertyNegativeSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            tmp <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span>doPrivileged
                <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span>GetIntegerAction</span><span class="token punctuation">(</span>negativeCachePolicyPropFallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                negativeCachePolicy <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>negativeCachePolicy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    negativeCachePolicy <span class="token operator">=</span> <span class="token constant">FOREVER</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                propertyNegativeSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>通过上述代码，可以很清楚的看到<em>networkaddress.cache.ttl</em>配置优先级最高，取不到的情况下取<em>sun.net.inetaddr.ttl</em>配置；
若都无配置且SecurityManager（jdk17过时）为空的情况下，那么就执行配置设置（默认为30s）。</p>
<h3>更深层调用</h3>
<p>在方法<em>getAddressesFromNameService(String host, InetAddress reqAddr)</em>中观察到真实的调用方法</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java">addresses <span class="token operator">=</span> nameService<span class="token punctuation">.</span><span class="token function">lookupAllHostAddr</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>此处的nameService为<em>sun.net.spi.nameservice</em>
例如官方包中提供的<em>sun.net.spi.nameservice.dns.DNSNameService</em>
其中的lookupAllHostAddr方法</p>
<h3>使用方式</h3>
<p>通过名字，很明显的看到这是网络地址缓存策略类，其使用场景位于<em>InetAddress</em>类中</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">InetAddress</span><span class="token punctuation">[</span><span class="token punctuation">]</span> getAllByName0 <span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> reqAddr<span class="token punctuation">,</span> <span class="token keyword">boolean</span> check<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span>  <span class="token punctuation">&#123;</span>

        <span class="token comment">/* If it gets here it is presumed to be a hostname */</span>
        <span class="token comment">/* Cache.get can return: null, unknownAddress, or InetAddress[] */</span>

        <span class="token comment">/* make sure the connection to the host is allowed, before we
         * give out a hostname
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                security<span class="token punctuation">.</span><span class="token function">checkConnect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">InetAddress</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addresses <span class="token operator">=</span> <span class="token function">getCachedAddresses</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* If no entry in cache, then do the host lookup */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addresses <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            addresses <span class="token operator">=</span> <span class="token function">getAddressesFromNameService</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> reqAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>addresses <span class="token operator">==</span> unknown_array<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> addresses<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>getAllByName0方法中首先尝试从本地缓存中获取参数host对应的ip地址信息；
当缓存为空的情况，执行不同nameSpace的lookupAllHostAddr方法查找，例如ipv4类型由Inet4AddressImpl提供native方法。</p>
<h3>测试</h3>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
executor<span class="token punctuation">.</span><span class="token function">sheduledAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"tuean.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>getHostAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>上述代码启动后即以每秒一次的速度打印<em>tuean.cn</em>对应的ip。</p>
<h4>附录</h4>
<p><a href="http://javaeesupportpatterns.blogspot.com/2011/03/java-dns-cache-reference-guide.html" rel="noopener noreferrer" target="_blank">1. cache reference guide</a>
<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/" rel="noopener noreferrer" target="_blank">2. jdk source code</a></p>`;
});
const __vite_glob_0_13 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Jvm_dns_cache,
  metadata: metadata$l
}, Symbol.toStringTag, { value: "Module" }));
const metadata$k = {
  "title": "maven",
  "date": "2019-09-29",
  "tags": ["maven"],
  "image": "https://i.loli.net/2019/10/30/EoyZbx7Ye4RT1st.jpg",
  "summary": "maven相关指令",
  "author": "tuean",
  "draft": false
};
const Maven = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>maven相关命令</h3>
<h4>maven项目版本设置</h4>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash">mvn versions:set <span class="token parameter variable">-DnewVersion</span><span class="token operator">=</span>xxx

mvn versions:commit</code>`}<!-- HTML_TAG_END --></pre>
<h4>maven提交源码</h4>
<p>添加plugin插件</p>
<pre class="language-xml"><!-- HTML_TAG_START -->${`<code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attach</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attach</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
						<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
						<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
							<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
						<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_14 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Maven,
  metadata: metadata$k
}, Symbol.toStringTag, { value: "Module" }));
const metadata$j = {
  "title": "pdf-xss",
  "date": "2021-12-13",
  "tags": ["xss"],
  "image": "https://image-1256217908.cos.ap-shanghai.myqcloud.com/71e52c67f5094e44b92ccaed93db15c5.jpeg",
  "author": "tuean",
  "summary": "pdf导致的xss问题"
};
const Pdf_xss = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2>pdf导致的xss问题</h2>
<p>今日做了个需求，需要将h5页面导出为pdf并作为附件分享，当时的设计方案为前端使用html2pdf进行转义，并调用上传接口保存，后续该文件可下载预览。</p>
<p>功能开发一切顺利，但是安全部门发现流程中的一些问题。</p>
<h3>问题复现</h3>
<p>可通过迅捷pdf编辑器，直接修改pdf，在文件中添加jscript相关代码，当浏览器直接打开时，将其识别为js并执行。</p>
<p>具体复现逻辑可参考<a href="https://www.cnblogs.com/xiaozi/p/9951622.html" rel="noopener noreferrer" target="_blank">过程</a></p>
<h3>解决方案</h3>
<ol><li><p>后端识别pdf文件
文件读取后，识别是否存在 <strong>/Js</strong> 或 <strong>/JavaScript</strong> 等代码</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">return contains(file, &quot;/JavaScript&quot;) || contains(file, &quot;/JS&quot;)</code>`}<!-- HTML_TAG_END --></pre>
<p>方案源自<a href="https://github.com/iandl22/laravel_pdf_xss_validator/blob/main/PdfXssRule" rel="noopener noreferrer" target="_blank">github</a></p></li>
<li><p>前端使用其他方式解析pdf
使用pdf.js仍会触发该攻击，经过调研，可使用 </p>
<ul><li><a href="http://www.yozosoft.com/home.htm" rel="noopener noreferrer" target="_blank"><strong>永中DCS（付费）</strong></a></li>
<li><a href="https://github.com/diegomura/react-pdf" rel="noopener noreferrer" target="_blank"><strong>react-pdf(开源)</strong></a></li></ul></li></ol>`;
});
const __vite_glob_0_15 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Pdf_xss,
  metadata: metadata$j
}, Symbol.toStringTag, { value: "Module" }));
const metadata$i = {
  "title": "react-setState-problem",
  "date": "2019-12-19",
  "tags": ["react", "problem", "前端"],
  "image": null,
  "summary": "this.setState is not a function",
  "author": "tuean"
};
const React_setState_problem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>this.setState is not a function</h3>
<h4>背景</h4>
<p>记录一下今天遇到的一个小问题
下午在公司开发一款b端产品前端时，爆出一个回调问题，</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">this.setState is not a function</code>`}<!-- HTML_TAG_END --></pre>
<p>具体逻辑为在请求完一个删除接口后重新请求当前页面数据接口，重新渲染页面。</p>
<h4>解决过程</h4>
<p>对应页面逻辑为在删除请求成功后，而请求使用<strong>Promise</strong>包装，通过<strong>then</strong>调用，
因而当时想到的是<strong>this</strong>的指向问题，通过设置</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">bind</code>`}<!-- HTML_TAG_END --></pre>
<p>进行解决</p>
<p>尝试了一下，发现仍报该错误，怀疑是绑定错误，再将过程中涉及到的函数全部绑定</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">this.method = this.method.bind(this)</code>`}<!-- HTML_TAG_END --></pre>
<p>继续尝试，仍抛出该问题，通过查询stackoverflow等网站均提示为仅需bind即可解决问题</p>
<p>遇事不决小黄鸭</p>
<p>根据需求，从头开始梳理页面逻辑，在对应代码处添加<strong>console</strong>及debugger进行检测，
发现this值已存在且正确，但是，点开this对应值，找到其中的setState，意外发现居然不是function</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">setStats: &#123;&#125;</code>`}<!-- HTML_TAG_END --></pre>
<p>居然是个对象，于是恍然大悟，应该是代码某处将setState设置为了对象，覆盖了原有的function
搜索后果不其然，有一处多写了个<strong>=</strong>，修改后problem solved</p>
<h4>总结</h4>
<ol><li><p>作为常年写java的同学，在学习动态语言时需要注意，对象变量等类型不定，并可随意赋值，这块相对java等静态语言需要在思想上特别注意</p></li>
<li><p>深入了解一下bind函数</p>
<p>es5中，自动进行绑定
在es6中，bind方法将创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</code>`}<!-- HTML_TAG_END --></pre>
<p>this指向：</p>
<ol><li>纯粹的函数调用 代表全局对象</li>
<li>作为对象方法的调用 代表上级对象</li>
<li>作为构造函数调用 代表生成的新对象</li>
<li>apply调用 代表apply方法的第一个参数</li></ol></li></ol>`;
});
const __vite_glob_0_16 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: React_setState_problem,
  metadata: metadata$i
}, Symbol.toStringTag, { value: "Module" }));
const metadata$h = {
  "title": "session-missing",
  "date": "2020-08-12",
  "tags": ["session", "chrome"],
  "image": "https://i.loli.net/2020/08/12/tgGR5QEy1dznb69.jpg",
  "summary": "session消失问题",
  "author": "tuean"
};
const Session_missing = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>session消失问题</h3>
<p>目前，本公司使用session方式进行登录验证。
某天，有几位同事反馈登录异常情况，经过检查发现，在子iframe页面中发送的请求没有携带相应cookie。
继而向上查询问题，发现chrome控制台中Application栏中Cookies没有对应域下cookie；
检查登录接口，是正常的set-cookie的相关返回；
因此怀疑是浏览器对不同域下的cookie进行了特殊处理，搜索后发现果然如此。</p>
<p>发现网上有相同问题，例如：<a href="https://blog.csdn.net/sinat_36521655/article/details/104844667" rel="noopener noreferrer" target="_blank">https://blog.csdn.net/sinat_36521655/article/details/104844667</a></p>
<p>检查出问题同事的chrome浏览器版本，果然都是最新版84（大于80）。
通过访问</p>
<pre class="language-text"><!-- HTML_TAG_START -->${`<code class="language-text">chrome://flags</code>`}<!-- HTML_TAG_END --></pre>
<p>设置sameSite相关属性为disable</p>
<ol><li>SameSite by default cookies</li>
<li>Cookies without SameSite must be secure</li></ol>
<p>问题得到临时解决</p>`;
});
const __vite_glob_0_17 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Session_missing,
  metadata: metadata$h
}, Symbol.toStringTag, { value: "Module" }));
const metadata$g = {
  "title": "shadowsocks",
  "date": "2019-09-28T18:29:22.000Z",
  "tags": ["shadowsocks", "vpn"],
  "image": "https://i.loli.net/2019/10/23/vUrsJTni9XRkB83.jpg",
  "summary": "vpn",
  "author": "tuean"
};
const Shadowsocks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>服务器环境</h3>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">Ubuntu 14.04 x86_64   </code>`}<!-- HTML_TAG_END --></pre>
<h3>ss安装教程</h3>
<blockquote><p>近期临近国庆，vps被封ip的厉害，just my socks注册了连不上，工单也没有回复，暂时没有对应梯子了</p></blockquote>
<blockquote><p>收到工单回复 重装了下ss客户端，修改了密码、端口、加密方式，本地电脑mac pro禁用ip6即可</p></blockquote>
<ol><li>下载ss客户端</li></ol>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash">pip3 <span class="token function">install</span> https://github.com/shadowsocks/shadowsocks/archive/master.zip</code>`}<!-- HTML_TAG_END --></pre>
<ol start="2"><li>配置文件</li></ol>
<pre class="language-json"><!-- HTML_TAG_START -->${`<code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span>
    <span class="token property">"server_port"</span><span class="token operator">:</span> <span class="token string">"port"</span><span class="token punctuation">,</span>
    <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"local_port"</span><span class="token operator">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>
    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>
    <span class="token property">"timeout"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"aes-256-cfb"</span><span class="token punctuation">,</span>
    <span class="token property">"fast_open"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<ol start="3"><li>ssserver 命令</li></ol>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">sudo</span> ssserver <span class="token parameter variable">-c</span> /etc/shadowsocks.json <span class="token parameter variable">-d</span> start</code>`}<!-- HTML_TAG_END --></pre>
<blockquote><p><a href="https://novnan.github.io/Shadowsocks/setup-Shadowsocks-on-ubuntu-1604/" rel="noopener noreferrer" target="_blank">参考教程</a></p></blockquote>
<h3>fail2ban</h3>
<blockquote><p>如果日志中有发现恶意扫描，可使用该工具进行拦截屏蔽</p></blockquote>
<blockquote><p><a href="https://www.laobuluo.com/1800.html" rel="noopener noreferrer" target="_blank">参考教程</a></p></blockquote>
<h3>相关命令</h3>
<ul><li>mac禁用ip6</li></ul>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">sudo</span> <span class="token function">killall</span> <span class="token parameter variable">-HUP</span> mDNSResponder</code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_18 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Shadowsocks,
  metadata: metadata$g
}, Symbol.toStringTag, { value: "Module" }));
const metadata$f = {
  "title": "spring-pathPattern",
  "date": "2022-07-04",
  "tags": ["java", "spring"],
  "author": "tuean",
  "summary": "spring5中的pathPattern"
};
const Spring_pathPattern = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>spring5中的pathPattern</h3>
<p>近期将springboot版本由2.1.1升级至2.7.1时发现出现path校验失败的场景，查看spring升级文档后发现，默认的路径匹配已经调整为PathPattern;</p>
<p>该包完整路径未： <em>org.springframework.web.util.pattern.PathPattern</em></p>
<p>在springboot项目中可通过</p>
<pre class="language-properties"><!-- HTML_TAG_START -->${`<code class="language-properties"><span class="token key attr-name">spring.mvc.pathmatch.matching-strategy</span><span class="token punctuation">=</span></code>`}<!-- HTML_TAG_END --></pre>
<p>可选参数在 <em>WebMvcProperties.MatchingStrategy</em>中</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">MatchingStrategy</span> <span class="token punctuation">&#123;</span>
        <span class="token constant">ANT_PATH_MATCHER</span><span class="token punctuation">,</span>
        <span class="token constant">PATH_PATTERN_PARSER</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">MatchingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>上述两者配置的实现类分别为</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">ANT_PATH_MATCHER
Use the AntPathMatcher implementation.
PATH_PATTERN_PARSER
Use the PathPatternParser implementation.</code>`}<!-- HTML_TAG_END --></pre>
<p>自 <a href="https://github.com/spring-projects/spring-boot/commit/2d89a8253cf4fc23dee831256a75730fcbba68d9" rel="noopener noreferrer" target="_blank">2d89a8253cf4fc23dee831256a75730fcbba68d9</a> 后调整为<em>PATH_PATTERN_PARSER</em></p>
<h3>参考文档</h3>
<ul><li><a href="https://docs.spring.io/spring-framework/docs/5.0.0.RC3_to_5.0.0.RC4/Spring%20Framework%205.0.0.RC4/org/springframework/web/util/pattern/PathPattern.html" rel="noopener noreferrer" target="_blank">1.spring</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.MatchingStrategy.html" rel="noopener noreferrer" target="_blank">2.MatchingStrategy</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/issues/24805" rel="noopener noreferrer" target="_blank">3.issue 24805</a></li></ul>`;
});
const __vite_glob_0_19 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Spring_pathPattern,
  metadata: metadata$f
}, Symbol.toStringTag, { value: "Module" }));
const metadata$e = {
  "title": "tmp-tomcat",
  "date": "2021-02-18",
  "tags": ["tomcat"],
  "image": "https://i.loli.net/2021/02/18/NrP3qR5p2eIt4SD.jpg",
  "author": "tuean",
  "summary": "tomcat临时目录问题"
};
const Tmp_tomcat = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>tomcat临时目录问题</h3>
<h4>问题简述</h4>
<p>tomcat服务出现异常</p>
<pre class="language-java"><!-- HTML_TAG_START -->${`<code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span>MultipartException</span></code>`}<!-- HTML_TAG_END --></pre>
<p>在上传文件接口中可能出现该异常，在其他post方法中也可能抛出该问题。</p>
<p>其原因为tomcat会在接受post请求后默认在/tmp文件夹下创建临时文件，路径例如：</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">/tmp/tomcat.4247994877978548129.7777/work/Tomcat/localhost/api</code>`}<!-- HTML_TAG_END --></pre>
<p>而一些linux发行版会定期删除/tmp文件夹下长期不访问的内容，如centos下</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">/usr/lib/tmpfiles.d/tmp.conf</code>`}<!-- HTML_TAG_END --></pre>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

# See tmpfiles.d(5) for details

# Clear tmp directories separately, to make them easier to override
v /tmp 1777 root root 10d
v /var/tmp 1777 root root 30d

# Exclude namespace mountpoints created with PrivateTmp=yes
x /tmp/systemd-private-%b-*
X /tmp/systemd-private-%b-*/tmp
x /var/tmp/systemd-private-%b-*
X /var/tmp/systemd-private-%b-*/tmp</code>`}<!-- HTML_TAG_END --></pre>
<p>这就导致了上述问题的发生。</p>
<h4>解决方案</h4>
<p>修改tmp.conf文件，添加exclude配置</p>
<pre class="language-undefined"><!-- HTML_TAG_START -->${`<code class="language-undefined">X /tmp/tomcat.*</code>`}<!-- HTML_TAG_END --></pre>
<h4>参考文档</h4>
<ul><li><a href="https://blog.csdn.net/leonnew/article/details/79258453" rel="noopener noreferrer" target="_blank">https://blog.csdn.net/leonnew/article/details/79258453</a></li></ul>`;
});
const __vite_glob_0_20 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Tmp_tomcat,
  metadata: metadata$e
}, Symbol.toStringTag, { value: "Module" }));
const metadata$d = {
  "title": "tools",
  "date": "2019-09-29T16:28:47.000Z",
  "tags": ["website", "github", "tool"],
  "image": "https://i.loli.net/2019/10/23/2whnVUlTNGBu5Ek.jpg",
  "summary": "github推荐",
  "author": "tuean"
};
const Tools = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>github推荐</h3>
<ul><li><p><a href="https://github.com/cbbrowne/tpp" rel="noopener noreferrer" target="_blank">tpp</a> 一款命令行ppt工具，很帅，很geek
首页：<a href="http://www.ngolde.de/tpp.html" rel="noopener noreferrer" target="_blank">地址</a></p></li>
<li><p><a href="https://github.com/nvbn/thefuck" rel="noopener noreferrer" target="_blank">theFuck</a> 暴躁老哥使用的命令修正工具</p></li>
<li><p><a href="https://github.com/chubin/cheat.sh#installation" rel="noopener noreferrer" target="_blank">cheat</a> 命令查询工具</p></li>
<li><p><a href="https://github.com/dylanaraps/neofetch" rel="noopener noreferrer" target="_blank">neofetch</a> 系统信息工具</p></li>
<li><p><a href="https://github.com/alibaba/arthas" rel="noopener noreferrer" target="_blank">arthas</a> java程序诊断工具</p></li></ul>
<h3>github工具</h3>
<ul><li><a href="https://shields.io/" rel="noopener noreferrer" target="_blank">readme图标</a></li></ul>
<h3>工具网站</h3>
<ul><li><a href="https://sm.ms" rel="noopener noreferrer" target="_blank">免费图床</a></li>
<li><a href="http://www.xuanwodata.com:3000/sregular/" rel="noopener noreferrer" target="_blank">正则示例</a></li>
<li><a href="https://daneden.github.io/animate.css/" rel="noopener noreferrer" target="_blank">css动画样式示例</a></li>
<li><a href="https://trends.google.com/trends/?geo=GB" rel="noopener noreferrer" target="_blank">google搜索词热度</a></li>
<li><a href="https://caocao.boxopened.com/" rel="noopener noreferrer" target="_blank">曹操导航</a></li>
<li><a href="https://utool.fun/" rel="noopener noreferrer" target="_blank">utool导航</a></li>
<li><a href="https://tools.miku.ac/image_patina/" rel="noopener noreferrer" target="_blank">图片做旧</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/" rel="noopener noreferrer" target="_blank">页面加载分析</a></li>
<li><a href="https://www.smartresize.com/zh-cn" rel="noopener noreferrer" target="_blank">图片批量裁剪</a></li>
<li><a href="https://regex101.com/" rel="noopener noreferrer" target="_blank">正则校验</a></li>
<li><a href="https://caniuse.com/" rel="noopener noreferrer" target="_blank">caniuse(浏览器css样式适配)</a></li>
<li><a href="https://www.iconfont.cn/" rel="noopener noreferrer" target="_blank">alibaba-icon</a></li>
<li><a href="http://javare.cn/" rel="noopener noreferrer" target="_blank">java反编译class</a></li>
<li><a href="http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20" rel="noopener noreferrer" target="_blank">花字生成</a></li>
<li><a href="https://zshthem.es/all/" rel="noopener noreferrer" target="_blank">zsh-themes</a></li>
<li><a href="http://www.cronmaker.com/" rel="noopener noreferrer" target="_blank">cron表达式生成</a></li>
<li><a href="http://selenium-release.storage.googleapis.com/index.html" rel="noopener noreferrer" target="_blank">selenium release包下载</a></li>
<li><a href="http://www.gsxt.gov.cn/index" rel="noopener noreferrer" target="_blank">国家企业信用信息公示系统</a></li>
<li><a href="https://npm.taobao.org/mirrors/chromedriver/" rel="noopener noreferrer" target="_blank">chromedriver npm 下载</a></li>
<li><a href="http://ip111.cn/" rel="noopener noreferrer" target="_blank">显示本地ip</a></li>
<li><a href="https://www.free-api.com/" rel="noopener noreferrer" target="_blank">free-api</a></li>
<li><a href="https://device.my/" rel="noopener noreferrer" target="_blank">查看当前设备屏幕尺寸</a></li>
<li><a href="http://samples.mplayerhq.hu/" rel="noopener noreferrer" target="_blank">测试视频资源</a></li>
<li><a href="https://privacy.qq.com/advertisement.htm" rel="noopener noreferrer" target="_blank">腾讯隐私，用来关闭广告</a></li>
<li><a href="http://www.dmanywhere.cn/" rel="noopener noreferrer" target="_blank">在线pdm打开</a></li>
<li><a href="https://www.lucidchart.com" rel="noopener noreferrer" target="_blank">vdsx在线打开</a></li>
<li><a href="https://www.injdk.cn/" rel="noopener noreferrer" target="_blank">jdk下载</a></li>
<li><a href="http://tool.mkblog.cn/lmbtfy/" rel="noopener noreferrer" target="_blank">教你使用百度</a></li>
<li><a href="https://rubular.com/" rel="noopener noreferrer" target="_blank">rubular在线正则</a></li>
<li><a href="http://zhongguose.com/" rel="noopener noreferrer" target="_blank">中国传统颜色</a></li>
<li><a href="https://pinyin.sogou.com/dict/ywz/" rel="noopener noreferrer" target="_blank">搜狗颜文字</a></li>
<li><a href="https://cron.qqe2.com/" rel="noopener noreferrer" target="_blank">6位cron</a></li>
<li><a href="https://www.digitalocean.com/community/tools/nginx?domains.0.routing.index=index.html&domains.0.routing.fallbackHtml=true&global.app.lang=zhCN" rel="noopener noreferrer" target="_blank">nginx配置文件生成</a></li>
<li><a href="http://axutongxue.com/" rel="noopener noreferrer" target="_blank">资源站(阿虚同学的储物间</a></li>
<li><a href="https://resume.mdedit.online/editor/#/" rel="noopener noreferrer" target="_blank">木及简历 (mdedit.online)</a></li>
<li><a href="http://zhongguose.com/" rel="noopener noreferrer" target="_blank">中国传统眼色</a></li>
<li><a href="https://crontab.cronhub.io/" rel="noopener noreferrer" target="_blank">cronhub</a></li>
<li><a href="https://leanpub.com/bookstore?type=book" rel="noopener noreferrer" target="_blank">leanpub</a></li>
<li><a href="https://ij.imjoy.io/" rel="noopener noreferrer" target="_blank">imagel online</a></li>
<li><a href="https://fsoufsou.com/" rel="noopener noreferrer" target="_blank">f搜</a></li></ul>
<h3>数据网站</h3>
<ul><li><a href="http://www.dydata.io" rel="noopener noreferrer" target="_blank">行业数据</a></li></ul>
<h3>在线画图</h3>
<ul><li><p><a href="https://www.websequencediagrams.com/" rel="noopener noreferrer" target="_blank">在线流程图</a></p></li>
<li><p><a href="https://processon.com/" rel="noopener noreferrer" target="_blank">processon.com</a></p></li>
<li><p><a href="https://www.draw.io/" rel="noopener noreferrer" target="_blank">draw.io</a></p></li></ul>
<h3>学习</h3>
<ul><li><p><a href="https://www.ibm.com/developerworks/cn/topics/" rel="noopener noreferrer" target="_blank">IBM developer</a></p></li>
<li><p><a href="https://legacy.gitbook.com/book/t0data/burpsuite/details" rel="noopener noreferrer" target="_blank">gitbook:burpsuit使用说明</a></p></li>
<li><p><a href="https://legacy.gitbook.com/book/quanke/design-pattern-java/details" rel="noopener noreferrer" target="_blank">gitbook:java设计模式</a></p></li>
<li><p><a href="https://www.mkyong.com/all-tutorials-on-mkyong-com/" rel="noopener noreferrer" target="_blank">java</a></p></li>
<li><p><a href="https://chokcoco.github.io/CSS-Inspiration/#/" rel="noopener noreferrer" target="_blank">css灵感</a></p></li>
<li><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" rel="noopener noreferrer" target="_blank">算法在线展示</a></p></li>
<li><p><a href="https://docs.breword.com/k88hudson-git-flight-rules/readme_zh-cn" rel="noopener noreferrer" target="_blank">git飞行日志</a></p></li>
<li><p><a href="https://cssbattle.dev/" rel="noopener noreferrer" target="_blank">css battle</a></p></li>
<li><p><a href="https://zh.learnlayout.com/" rel="noopener noreferrer" target="_blank">css学习</a></p></li>
<li><p><a href="http://flexboxfroggy.com/" rel="noopener noreferrer" target="_blank">flex学习</a></p></li>
<li><p><a href="https://css-tricks.com/" rel="noopener noreferrer" target="_blank">css文章</a></p></li>
<li><p><a href="https://codepen.io/" rel="noopener noreferrer" target="_blank">codepen</a></p></li>
<li><p><a href="https://neumorphism.io/#55b9f3" rel="noopener noreferrer" target="_blank">在线模拟</a></p></li>
<li><p><a href="https://uigradients.com/#VerBlack" rel="noopener noreferrer" target="_blank">好看的渐变色</a></p></li>
<li><p><a href="https://iconsvg.xyz/" rel="noopener noreferrer" target="_blank">自定义svg</a></p></li>
<li><p><a href="https://linux.liuxfe.com/" rel="noopener noreferrer" target="_blank">linux命令中文手册-带示例</a></p></li>
<li><p><a href="https://asciiflow.com/#/" rel="noopener noreferrer" target="_blank">手绘流程图</a></p></li></ul>
<h3>上班划水</h3>
<ul><li><p><a href="https://hacpai.com/" rel="noopener noreferrer" target="_blank">黑客派</a></p></li>
<li><p><a href="https://www.v2ex.com/" rel="noopener noreferrer" target="_blank">v2ex</a></p></li>
<li><p><a href="https://tophub.fun" rel="noopener noreferrer" target="_blank">鱼塘</a></p></li>
<li><p><a href="https://www.zhihu.com" rel="noopener noreferrer" target="_blank">知乎</a></p></li>
<li><p><a href="https://js1k.com/" rel="noopener noreferrer" target="_blank">js1k</a></p></li></ul>
<h3>梯子</h3>
<ul><li><p><a href="https://justmysocks1.net/members/index.php" rel="noopener noreferrer" target="_blank">just my socks</a>
省去自己搭梯子的烦恼</p></li>
<li><p><a href="https://shadowsocks.org/en/download/clients.html" rel="noopener noreferrer" target="_blank">ss 客户端下载</a></p></li>
<li><p><a href="https://linghucong.js.org/2016/04/20/setup-Shadowsocks-on-ubuntu-1604/" rel="noopener noreferrer" target="_blank">ss 服务端搭建教程</a></p></li></ul>
<h3>免费直播</h3>
<ul><li><a href="http://www.ningmengtiyu.com/" rel="noopener noreferrer" target="_blank">柠檬直播</a></li></ul>
<h3>刷题</h3>
<ul><li><p><a href="https://leetcode.com/problemset/all/" rel="noopener noreferrer" target="_blank">leetcode</a></p></li>
<li><p><a href="https://www.lintcode.com/zh-cn/problem/" rel="noopener noreferrer" target="_blank">lintcode</a></p></li>
<li><p><a href="https://www.hackerearth.com/zh/" rel="noopener noreferrer" target="_blank">hackerearth</a></p></li>
<li><p><a href="https://www.codewars.com" rel="noopener noreferrer" target="_blank">codewars</a></p></li>
<li><p><a href="http://acm.pku.edu.cn/JudgeOnline/" rel="noopener noreferrer" target="_blank">北京大学PKU</a></p></li>
<li><p><a href="http://acm.zju.edu.cn/" rel="noopener noreferrer" target="_blank">浙江大学ZKU</a>
from <a href="https://blog.csdn.net/kangyan__/article/details/70184935" rel="noopener noreferrer" target="_blank">来源</a></p></li></ul>
<h3>官方文档</h3>
<ul><li><p><a href="https://cwiki.apache.org/confluence/display/tomcat/" rel="noopener noreferrer" target="_blank">tomcat</a></p></li>
<li><p><a href="https://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#appendix" rel="noopener noreferrer" target="_blank">springboot</a></p></li>
<li><p><a href="https://prestodb.io/docs/current/" rel="noopener noreferrer" target="_blank">presto-current</a></p></li>
<li><p><a href="https://prestodb.io/docs/0.189/sql/deallocate-prepare.html" rel="noopener noreferrer" target="_blank">presto-0.189</a></p></li>
<li><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-InsertingintotablesfromSQL" rel="noopener noreferrer" target="_blank">hive查询</a></p></li>
<li><p><a href="https://start.spring.io/actuator/info" rel="noopener noreferrer" target="_blank">spring cloud boot 版本对应</a></p></li></ul>
<h3>电子书资源</h3>
<ul><li><a href="https://www.d4j.cn/" rel="noopener noreferrer" target="_blank">三秋书屋</a></li></ul>
<h4>破解</h4>
<ul><li><p><a href="http://www.ddup.date/navicat-premium-12-1-15-%E6%9C%80%E6%96%B0%E7%89%88%E7%A0%B4%E8%A7%A3%E5%AE%89%E8%A3%85%EF%BC%88windows%EF%BC%89/" rel="noopener noreferrer" target="_blank">nacicat premium</a></p></li>
<li><p><a href="https://moresound.tk/music/tool/" rel="noopener noreferrer" target="_blank">ncm格式破解</a></p></li>
<li><p><a href="http://idea.medeming.com/jets" rel="noopener noreferrer" target="_blank">idea破解码</a></p></li>
<li><p><a href="https://macwk.com/" rel="noopener noreferrer" target="_blank">mac破解软件下载</a></p></li></ul>
<h4>blog</h4>
<ul><li><p><a href="https://tech.meituan.com/" rel="noopener noreferrer" target="_blank">美团技术团队</a></p></li>
<li><p><a href="https://blog.codingnow.com/" rel="noopener noreferrer" target="_blank">风云</a></p></li>
<li><p><a href="http://www.ruanyifeng.com/blog/" rel="noopener noreferrer" target="_blank">阮一峰</a></p></li>
<li><p><a href="https://coolshell.cn/" rel="noopener noreferrer" target="_blank">左耳朵耗子</a></p></li>
<li><p><a href="http://techblog.pub/" rel="noopener noreferrer" target="_blank">列表</a></p></li></ul>
<h4>壁纸</h4>
<ul><li><p><a href="http://lcoc.top/bizhi/" rel="noopener noreferrer" target="_blank">lcoc</a></p></li>
<li><p><a href="https://www.sigoo.com/" rel="noopener noreferrer" target="_blank">极像素</a></p></li>
<li><p><a href="http://pic.netbian.com/" rel="noopener noreferrer" target="_blank">彼岸图网</a></p></li>
<li><p><a href="https://www.logosc.cn/so/" rel="noopener noreferrer" target="_blank">免费版权图片搜索</a></p></li></ul>
<h4>idea plugin</h4>
<ul><li>Active-power-mode</li>
<li>nyan progress bar</li>
<li>Meterial Theme UI </li>
<li>Atom Material Icons</li>
<li>GitToolBox</li>
<li>Maven Helper</li>
<li>Vuesion Theme</li></ul>`;
});
const __vite_glob_0_21 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Tools,
  metadata: metadata$d
}, Symbol.toStringTag, { value: "Module" }));
const metadata$c = {
  "title": "watermark",
  "date": "2019-11-15T10:01:50.000Z",
  "tags": ["watermark", "前端"],
  "image": "http://m.imeitou.com/uploads/allimg/2018081608/surthcsugci.jpg",
  "summary": "水印",
  "author": "tuean"
};
const Watermark = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2>水印</h2>
<h3>明水印</h3>
<p>网上找了个实现</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">watermark</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">debugger</span><span class="token punctuation">;</span>
    <span class="token comment">//默认设置</span>
    <span class="token keyword">var</span> defaultSettings<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">watermark_txt</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">watermark_x</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印起始位置x轴坐标</span>
        <span class="token literal-property property">watermark_y</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印起始位置Y轴坐标</span>
        <span class="token literal-property property">watermark_rows</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印行数</span>
        <span class="token literal-property property">watermark_cols</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印列数</span>
        <span class="token literal-property property">watermark_x_space</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//水印x轴间隔</span>
        <span class="token literal-property property">watermark_y_space</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token comment">//水印y轴间隔</span>
        <span class="token literal-property property">watermark_color</span><span class="token operator">:</span><span class="token string">'#aaa'</span><span class="token punctuation">,</span><span class="token comment">//水印字体颜色</span>
        <span class="token literal-property property">watermark_alpha</span><span class="token operator">:</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token comment">//水印透明度</span>
        <span class="token literal-property property">watermark_fontsize</span><span class="token operator">:</span><span class="token string">'15px'</span><span class="token punctuation">,</span><span class="token comment">//水印字体大小</span>
        <span class="token literal-property property">watermark_font</span><span class="token operator">:</span><span class="token string">'微软雅黑'</span><span class="token punctuation">,</span><span class="token comment">//水印字体</span>
        <span class="token literal-property property">watermark_width</span><span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token comment">//水印宽度</span>
        <span class="token literal-property property">watermark_height</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token comment">//水印长度</span>
        <span class="token literal-property property">watermark_angle</span><span class="token operator">:</span><span class="token number">15</span><span class="token comment">//水印倾斜度数</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">//采用配置项替换默认值，作用类似jquery.extend</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">"object"</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> src<span class="token operator">=</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> src<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">===</span>defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">var</span> oTemp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取页面最大宽度</span>
    <span class="token keyword">var</span> page_width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> cutWidth <span class="token operator">=</span> page_width<span class="token operator">*</span><span class="token number">0.0150</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> page_width<span class="token operator">=</span>page_width<span class="token operator">-</span>cutWidth<span class="token punctuation">;</span>
    <span class="token comment">//获取页面最大高度</span>
    <span class="token keyword">var</span> page_height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">450</span><span class="token punctuation">;</span>
    <span class="token comment">// var page_height = document.body.scrollHeight+document.body.scrollTop;</span>
    <span class="token comment">//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_cols <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_x <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">*</span>defaultSettings<span class="token punctuation">.</span>watermark_cols <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_x_space <span class="token operator">*</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> page_width<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        defaultSettings<span class="token punctuation">.</span>watermark_cols <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_width<span class="token operator">-</span>defaultSettings<span class="token punctuation">.</span>watermark_x<span class="token operator">+</span>defaultSettings<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultSettings<span class="token punctuation">.</span>watermark_x_space <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_width <span class="token operator">-</span> defaultSettings<span class="token punctuation">.</span>watermark_x <span class="token operator">-</span> defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">*</span> defaultSettings<span class="token punctuation">.</span>watermark_cols<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_rows <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_y <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_height <span class="token operator">*</span> defaultSettings<span class="token punctuation">.</span>watermark_rows <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_y_space <span class="token operator">*</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> page_height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        defaultSettings<span class="token punctuation">.</span>watermark_rows <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_y_space <span class="token operator">+</span> page_height <span class="token operator">-</span> defaultSettings<span class="token punctuation">.</span>watermark_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_height <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_y_space<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultSettings<span class="token punctuation">.</span>watermark_y_space <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_height <span class="token operator">-</span> defaultSettings<span class="token punctuation">.</span>watermark_y<span class="token punctuation">)</span> <span class="token operator">-</span> defaultSettings<span class="token punctuation">.</span>watermark_height <span class="token operator">*</span> defaultSettings<span class="token punctuation">.</span>watermark_rows<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> x<span class="token punctuation">;</span>
    <span class="token keyword">var</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> defaultSettings<span class="token punctuation">.</span>watermark_rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_y <span class="token operator">+</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_y_space <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_height<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> defaultSettings<span class="token punctuation">.</span>watermark_cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            x <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_x <span class="token operator">+</span> <span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span> <span class="token operator">*</span> j<span class="token punctuation">;</span>

            <span class="token keyword">var</span> mask_div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'mask_div'</span> <span class="token operator">+</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'mask_div'</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">.</span>watermark_txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//设置水印div倾斜显示</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>webkitTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>MozTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>msTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>OTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> defaultSettings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"hidden"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token string">"9999"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>pointerEvents<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span><span class="token comment">//pointer-events:none  让水印不遮挡页面的点击事件</span>
            <span class="token comment">//mask_div.style.border="solid #eee 1px";</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_alpha<span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_fontsize<span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontFamily <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_font<span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_color<span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">"center"</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_height <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
            oTemp<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>mask_div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<p>该方法实现了水印的生成，但仍存在几个问题</p>
<ul><li>调整页面分辨率后，水印没有进行动态调整适配</li>
<li>可通过手动去除页面元素方式进行删除</li></ul>
<p>故做了一些调整</p>
<ol><li>对所有水印元素添加了监控，一旦发现有变化立即重新生成</li>
<li>对水印上层元素添加了监控，一旦发现水印元素有删除，立即重新生成</li>
<li>在页面分辨率有变化的情况下，重新计算水印参数并重新生成页面</li></ol>
<p>调整后代码如下：</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">const</span> defaultSettings<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">watermark_txt</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">watermark_x</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印起始位置x轴坐标</span>
        <span class="token literal-property property">watermark_y</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token comment">//水印起始位置Y轴坐标</span>
        <span class="token literal-property property">watermark_rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//水印行数</span>
        <span class="token literal-property property">watermark_cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//水印列数</span>
        <span class="token literal-property property">watermark_x_space</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//水印x轴间隔</span>
        <span class="token literal-property property">watermark_y_space</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token comment">//水印y轴间隔</span>
        <span class="token literal-property property">watermark_color</span><span class="token operator">:</span><span class="token string">'#aaa'</span><span class="token punctuation">,</span><span class="token comment">//水印字体颜色</span>
        <span class="token literal-property property">watermark_alpha</span><span class="token operator">:</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token comment">//水印透明度</span>
        <span class="token literal-property property">watermark_fontsize</span><span class="token operator">:</span><span class="token string">'15px'</span><span class="token punctuation">,</span><span class="token comment">//水印字体大小</span>
        <span class="token literal-property property">watermark_font</span><span class="token operator">:</span><span class="token string">'微软雅黑'</span><span class="token punctuation">,</span><span class="token comment">//水印字体</span>
        <span class="token literal-property property">watermark_width</span><span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token comment">//水印宽度</span>
        <span class="token literal-property property">watermark_height</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token comment">//水印长度</span>
        <span class="token literal-property property">watermark_angle</span><span class="token operator">:</span><span class="token number">15</span><span class="token comment">//水印倾斜度数</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mask_name <span class="token operator">=</span> <span class="token string">'mask'</span>
<span class="token keyword">const</span> mask_class <span class="token operator">=</span> <span class="token string">'mask_div'</span>
<span class="token keyword">const</span> mask_id_prefix <span class="token operator">=</span> <span class="token string">"mask_div"</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">removeAllWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> olds <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div[name='</span> <span class="token operator">+</span> mask_name <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>
    olds<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> olds2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> mask_class <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span>
    olds2<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>remove<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">makeWaterMarkId</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> mask_id_prefix <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> j
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">createWaterMarkCell</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> id<span class="token punctuation">,</span> settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> mask_div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
    mask_div<span class="token punctuation">.</span>id <span class="token operator">=</span> idmask_div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> mask_name<span class="token punctuation">)</span>
    mask_div<span class="token punctuation">.</span>className <span class="token operator">=</span> mask_class
    mask_div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>watermark_txt<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">//设置水印div倾斜显示</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>webkitTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>MozTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>msTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>OTransform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"rotate(-"</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>watermark_angle <span class="token operator">+</span> <span class="token string">"deg)"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"hidden"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token string">"9999"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>pointerEvents<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span><span class="token comment">//pointer-events:none  让水印不遮挡页面的点击事件</span>
    <span class="token comment">//mask_div.style.border="solid #eee 1px";</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_alpha<span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_fontsize<span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontFamily <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_font<span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_color<span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">"center"</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> defaultSettings<span class="token punctuation">.</span>watermark_height <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
    mask_div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mask_div
<span class="token punctuation">&#125;</span>

<span class="token comment">// 监听所有的水印元素 是否被修改</span>
<span class="token keyword">function</span> <span class="token function">listen_water_mark</span><span class="token punctuation">(</span><span class="token parameter">targetNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">watermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 监听body元素 防止水印元素被删除</span>
<span class="token keyword">let</span> bodyObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">listen_water_mark_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    bodyObserver<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    bodyObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">mutations</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> needReDraw <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> removeNodes <span class="token operator">=</span> mutation<span class="token punctuation">.</span>removedNodes
            <span class="token keyword">if</span> <span class="token punctuation">(</span>removeNodes<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
            removeNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>needReDraw<span class="token punctuation">)</span> <span class="token keyword">return</span>
                <span class="token keyword">let</span> jitem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
                <span class="token keyword">let</span> clazz <span class="token operator">=</span> jitem<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span>
                <span class="token keyword">let</span> clazzFlag <span class="token operator">=</span> clazz <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> clazz<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>mask_class<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>
                <span class="token keyword">let</span> name <span class="token operator">=</span> jitem<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>
                <span class="token keyword">let</span> nameFlag <span class="token operator">=</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>mask_name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>
                <span class="token keyword">let</span> id <span class="token operator">=</span> jitem<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>
                <span class="token keyword">let</span> idFlag <span class="token operator">=</span> id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>mask_id_prefix<span class="token punctuation">)</span>
                needReDraw <span class="token operator">=</span> clazzFlag <span class="token operator">||</span> nameFlag <span class="token operator">||</span> idFlag
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>needReDraw<span class="token punctuation">)</span> <span class="token function">watermark</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    bodyObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">watermark</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">removeAllWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">//采用配置项替换默认值，作用类似jquery.extend</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">"object"</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> src<span class="token operator">=</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> src<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">===</span>defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                defaultSettings<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">let</span> instant_setting <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>defaultSettings<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> oTemp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取页面最大宽度</span>
    <span class="token keyword">let</span> page_width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cutWidth <span class="token operator">=</span> page_width<span class="token operator">*</span><span class="token number">0.0150</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> page_width<span class="token operator">=</span>page_width<span class="token operator">-</span>cutWidth<span class="token punctuation">;</span>
    <span class="token comment">//获取页面最大高度</span>
    <span class="token keyword">let</span> page_height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">450</span><span class="token punctuation">;</span>
    <span class="token comment">// var page_height = document.body.scrollHeight+document.body.scrollTop;</span>
    <span class="token comment">//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_cols <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_x <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_width <span class="token operator">*</span>instant_setting<span class="token punctuation">.</span>watermark_cols <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_x_space <span class="token operator">*</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> page_width<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        instant_setting<span class="token punctuation">.</span>watermark_cols <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_width<span class="token operator">-</span>instant_setting<span class="token punctuation">.</span>watermark_x<span class="token operator">+</span>instant_setting<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instant_setting<span class="token punctuation">.</span>watermark_x_space <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_width <span class="token operator">-</span> instant_setting<span class="token punctuation">.</span>watermark_x <span class="token operator">-</span> instant_setting<span class="token punctuation">.</span>watermark_width <span class="token operator">*</span> instant_setting<span class="token punctuation">.</span>watermark_cols<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_rows <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_y <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_height <span class="token operator">*</span> instant_setting<span class="token punctuation">.</span>watermark_rows <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_y_space <span class="token operator">*</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> page_height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        instant_setting<span class="token punctuation">.</span>watermark_rows <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_y_space <span class="token operator">+</span> page_height <span class="token operator">-</span> instant_setting<span class="token punctuation">.</span>watermark_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_height <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_y_space<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instant_setting<span class="token punctuation">.</span>watermark_y_space <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page_height <span class="token operator">-</span> instant_setting<span class="token punctuation">.</span>watermark_y<span class="token punctuation">)</span> <span class="token operator">-</span> instant_setting<span class="token punctuation">.</span>watermark_height <span class="token operator">*</span> instant_setting<span class="token punctuation">.</span>watermark_rows<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">var</span> x<span class="token punctuation">;</span>
    <span class="token keyword">var</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> instant_setting<span class="token punctuation">.</span>watermark_rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y <span class="token operator">=</span> instant_setting<span class="token punctuation">.</span>watermark_y <span class="token operator">+</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_y_space <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_height<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> instant_setting<span class="token punctuation">.</span>watermark_cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            x <span class="token operator">=</span> instant_setting<span class="token punctuation">.</span>watermark_x <span class="token operator">+</span> <span class="token punctuation">(</span>instant_setting<span class="token punctuation">.</span>watermark_width <span class="token operator">+</span> instant_setting<span class="token punctuation">.</span>watermark_x_space<span class="token punctuation">)</span> <span class="token operator">*</span> j<span class="token punctuation">;</span>
            <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">makeWaterMarkId</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
            <span class="token keyword">let</span> mask_div <span class="token operator">=</span> <span class="token function">createWaterMarkCell</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> id<span class="token punctuation">,</span> instant_setting<span class="token punctuation">)</span>
            oTemp<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>mask_div<span class="token punctuation">)</span>
            <span class="token function">listen_water_mark</span><span class="token punctuation">(</span>mask_div<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oTemp<span class="token punctuation">)</span>
    
    <span class="token function">listen_water_mark_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">removeAllWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>暗水印</h3>
<p>类似阿里巴巴内网中水印，见<a href="https://www.zhihu.com/question/50735753" rel="noopener noreferrer" target="_blank">知乎讨论</a></p>
<p>具体实现方式待续</p>`;
});
const __vite_glob_0_22 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Watermark,
  metadata: metadata$c
}, Symbol.toStringTag, { value: "Module" }));
const metadata$b = {
  "title": "webworker-reconnecting-websocket",
  "date": "2022-08-09T19:53:21.000Z",
  "tags": ["web worker", "reconnecting-websocket", "前端"],
  "author": "tuean",
  "summary": "reconnecting-websocket use in webworker"
};
const Webworker_reconnecting_websocket = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>reconnecting-websocket use in webworker</h3>
<p>前端心跳保活由于页面切换等操作，定时任务可能非正常执行；</p>
<p>使用web worker替换主线程执行；</p>
<h3>problems</h3>
<h4>window not defined</h4>
<p>web worker 内部没有window对象</p>
<h4>document not defined</h4>
<p>web worker 内部没有document对象</p>
<h3>解决方案</h3>
<p>github issue中看到类似的问题，思路是提供一个假的document供使用：</p>
<pre class="language-javascript"><!-- HTML_TAG_START -->${`<code class="language-javascript"><span class="token keyword">var</span> document <span class="token operator">=</span> self<span class="token punctuation">.</span>document <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">parentNode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">nodeType</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"FakeDocument"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> window <span class="token operator">=</span> self<span class="token punctuation">.</span>window <span class="token operator">=</span> self<span class="token punctuation">;</span>
<span class="token keyword">var</span> fakeElement <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
fakeElement<span class="token punctuation">.</span>nodeType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
fakeElement<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"FakeElement"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
fakeElement<span class="token punctuation">.</span>parentNode <span class="token operator">=</span> fakeElement<span class="token punctuation">.</span>firstChild <span class="token operator">=</span> fakeElement<span class="token punctuation">.</span>lastChild <span class="token operator">=</span> fakeElement<span class="token punctuation">;</span>
fakeElement<span class="token punctuation">.</span>ownerDocument <span class="token operator">=</span> document<span class="token punctuation">;</span>

document<span class="token punctuation">.</span>head <span class="token operator">=</span> document<span class="token punctuation">.</span>body <span class="token operator">=</span> fakeElement<span class="token punctuation">;</span>
document<span class="token punctuation">.</span>ownerDocument <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement <span class="token operator">=</span> document<span class="token punctuation">;</span>
document<span class="token punctuation">.</span>getElementById <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> fakeElement<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">createDocumentFragment</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>getElementsByTagName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function-variable function">getElementsByClassName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>fakeElement<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>getAttribute <span class="token operator">=</span> document<span class="token punctuation">.</span>setAttribute <span class="token operator">=</span> document<span class="token punctuation">.</span>removeChild <span class="token operator">=</span>
    document<span class="token punctuation">.</span>addEventListener <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function-variable function">removeEventListener</span> <span class="token operator">=</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cloneNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function-variable function">appendChild</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">appendChild</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> child<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>childNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>implementation <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">createHTMLDocument</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> document<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>附录</h3>
<ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers#web_workers_api" rel="noopener noreferrer" target="_blank">web worker</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval" rel="noopener noreferrer" target="_blank">setInternal</a></li>
<li><a href="https://github.com/joewalnes/reconnecting-websocket/issues/51" rel="noopener noreferrer" target="_blank">web worker issue</a></li></ol>`;
});
const __vite_glob_0_23 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Webworker_reconnecting_websocket,
  metadata: metadata$b
}, Symbol.toStringTag, { value: "Module" }));
const metadata$a = {
  "title": "windowsKnowlodge",
  "date": "2021-08-25T21:35:48.000Z",
  "tags": ["windows"],
  "cover": "https://image-1256217908.cos.ap-shanghai.myqcloud.com/127f2bf2880511ebb6edd017c2d2eca2.jpeg",
  "author": "tuean",
  "summary": "about windows"
};
const WindowsKnowlodge = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>windows相关的一些内容</h3>
<h4>添加开机启动项</h4>
<ul><li><p>win+R   </p>
<pre class="language-cmd"><!-- HTML_TAG_START -->${`<code class="language-cmd">shell:startup</code>`}<!-- HTML_TAG_END --></pre>
<p>将快捷方式贴入该文件夹</p></li></ul>
<h4>cp命令</h4>
<p>cmd中cp命令为copy</p>
<h4>windows查找端口</h4>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">netstat</span> -aon<span class="token operator">|</span>findstr <span class="token string">"<span class="token variable">$&#123;port&#125;</span>"</span></code>`}<!-- HTML_TAG_END --></pre>
<h4>强制杀进程</h4>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell">taskkill /T /F /PID <span class="token variable">$&#123;pid&#125;</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_24 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: WindowsKnowlodge,
  metadata: metadata$a
}, Symbol.toStringTag, { value: "Module" }));
const metadata$9 = {
  "title": "sh",
  "date": "2020-12-02T17:15:54.000Z",
  "tags": ["shell"],
  "image": "https://i.loli.net/2021/02/18/o7jSzVZ4n9RBl5I.jpg",
  "author": "tuean",
  "summary": "一些shell脚本"
};
const UE4uB8u80uE4uBAu9BuE5uB8uB8uE7u94uA8uE7u9Au84bashuE8u84u9AuE6u9CuAC = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>查询大文件</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +800M</code>`}<!-- HTML_TAG_END --></pre>
<h3>大文件路径</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +800M  <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>大文件详细大小</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +800M  <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">du</span> <span class="token parameter variable">-h</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>文件大小排序</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M  <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>查看项目占用内存</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> *.jar <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $11 "&#92;t" $6/1024"MB" &#125;'</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>端口使用情况</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell">ss <span class="token parameter variable">-nplt</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>替换文件信息</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">sed</span> <span class="token parameter variable">-i</span> s/<span class="token punctuation">&#123;</span>old<span class="token punctuation">&#125;</span>/<span class="token punctuation">&#123;</span>new<span class="token punctuation">&#125;</span>/g <span class="token variable"><span class="token variable">&#96;</span><span class="token function">grep</span> <span class="token punctuation">&#123;</span>old<span class="token punctuation">&#125;</span> <span class="token parameter variable">-rl</span> ./<span class="token variable">&#96;</span></span></code>`}<!-- HTML_TAG_END --></pre>
<h3>查找文件中出现的次数</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell"><span class="token function">cat</span> info.log <span class="token operator">|</span><span class="token function">grep</span> <span class="token variable">$&#123;search&#125;</span> <span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>查看linux系统journal日志使用</h3>
<pre class="language-shell"><!-- HTML_TAG_START -->${`<code class="language-shell">journalctl --disk-usage</code>`}<!-- HTML_TAG_END --></pre>
<h3>mysql处理bin_log文件过大</h3>
<pre class="language-sql"><!-- HTML_TAG_START -->${`<code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'expire_logs_days'</span><span class="token punctuation">;</span>  

<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'max_binlog_size'</span><span class="token punctuation">;</span>  

<span class="token keyword">set</span> <span class="token keyword">global</span> expire_logs_days <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

flush logs<span class="token punctuation">;</span>  <span class="token comment">-- clean log files</span>

<span class="token keyword">show</span> master logs</code>`}<!-- HTML_TAG_END --></pre>
<h3>日期打印</h3>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span><span class="token variable">)</span></span></code>`}<!-- HTML_TAG_END --></pre>
<h3>Mac/linux查看网络交互</h3>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">sudo</span> tcpdump <span class="token parameter variable">-i</span> en0 <span class="token parameter variable">-n</span> port <span class="token number">80</span> <span class="token parameter variable">-vv</span></code>`}<!-- HTML_TAG_END --></pre>
<h3>查询网络流量消耗大的进程</h3>
<pre class="language-bash"><!-- HTML_TAG_START -->${`<code class="language-bash"><span class="token function">sudo</span> nethogs <span class="token parameter variable">-d</span> <span class="token number">1</span> <span class="token parameter variable">-v</span> <span class="token number">4</span> <span class="token parameter variable">-l</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
const __vite_glob_0_25 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: UE4uB8u80uE4uBAu9BuE5uB8uB8uE7u94uA8uE7u9Au84bashuE8u84u9AuE6u9CuAC,
  metadata: metadata$9
}, Symbol.toStringTag, { value: "Module" }));
const metadata$8 = {
  "title": "Piper Chat",
  "date": "2020-02-01T00:00:00.000Z",
  "draft": false,
  "description": "After The Platform fails to get investors the team instead more the company focus to the video chat platform PiperChat is a video chat platform created by Dinesh Chugtai. It was originally created to improve the image quality of Elizabet Kirsipuu video chat image since her image was poor quality due to her low internet connection, which soon proves to be popular.",
  "href": "https://www.bustle.com/p/piperchat-from-silicon-valley-has-real-inspirations-that-you-can-use-today-52313",
  "image": "/img/piperchat.jpg"
};
const Piperchat = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return ``;
});
const __vite_glob_1_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Piperchat,
  metadata: metadata$8
}, Symbol.toStringTag, { value: "Module" }));
const metadata$7 = {
  "title": "PiperNet",
  "date": "2020-04-01T00:00:00.000Z",
  "draft": false,
  "description": "PiperNet is the new generation of the internet. It allows users to encrypt and control their own data, rather than having stored in a centralized server.",
  "href": "https://fansided.com/2018/05/13/silicon-valley-season-5-finale-piper-net-decentralized-internet-explained/",
  "image": "/img/pipernet.jpg"
};
const Pipernet = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return ``;
});
const __vite_glob_1_1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Pipernet,
  metadata: metadata$7
}, Symbol.toStringTag, { value: "Module" }));
const metadata$6 = {
  "title": "The Box",
  "date": "2020-03-01T00:00:00.000Z",
  "draft": false,
  "description": "The box is a Pied Piper product. It is a new product by the Jack Barker-ran Pied Piper that has pivoted completely from what Richard originally envisioned with his technology. If this box seems familiar to some of you, it’s because it’s based on a real thing that’s already on the market.",
  "href": "https://thenextweb.com/news/pied-piper-box-silicon-valley-actually-based",
  "image": "/img/thebox.png"
};
const The_box = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return ``;
});
const __vite_glob_1_2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: The_box,
  metadata: metadata$6
}, Symbol.toStringTag, { value: "Module" }));
const metadata$5 = {
  "title": "The Platform",
  "date": "2020-01-01T00:00:00.000Z",
  "draft": false,
  "description": "Pied Piper's first product is a cloud based compression platform to allow users to compress and share their files between their devices. The platform contains a neural net which means that it improves as more files are uploaded. The question is if The Platform is as popular with the general public as it is with the tech industry.",
  "href": "https://uxdesign.cc/why-pied-piper-failed-and-why-you-should-always-test-with-real-users-b00c2ba40f9e",
  "image": "/img/theplatform.jpg"
};
const The_platform = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return ``;
});
const __vite_glob_1_3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: The_platform,
  metadata: metadata$5
}, Symbol.toStringTag, { value: "Module" }));
const metadata$4 = {
  "name": "Dinesh Chugtai",
  "avatar": "/img/dinesh.jpg",
  "occupation": "Lead Engineer",
  "company": "Pied Piper",
  "email": "dinesh@piedpiper.com",
  "twitter": "https://twitter.com/dineshisreal",
  "linkedin": "https://www.linkedin.com/in/dinesh-chugtai-64644a13b/",
  "github": "https://github.com/piedpiper"
};
const Dinesh_chugtai = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p>Dinesh lives and works in the Hacker Hostel with <strong>Richard</strong>, <strong>Big Head</strong>, and <strong>Gilfoyle</strong>. He possesses a dry wit and skills in writing code, particularly with Java. Dinesh often finds himself sparring with Gilfoyle.</p>
<p>Although originally from Pakistan, Dinesh is a US citizen, unlike <strong>Gilfoyle</strong>. He claims it took him five years to get US citizenship and was asked about Al-Qaeda “like 14 times”.</p>
<h3>Memorable Quotes</h3>
<blockquote><p>“I was already happy you got punched in the face, but now I’m super happy!”</p></blockquote>
<blockquote><p>“I know Gilfoyle probably came in here and puked out a bunch of tech specs, three-fourths of which are total horse shit. Did he bring up the Iranian revolution thing? Yeah, those words mean nothing. But here’s a fact, I’m the only one of these clowns that can code in Java and I write sleek performant low-overhead Scala code with higher order functions that will run on anything. Period. End of sentence.”</p></blockquote>
<blockquote><p>“That’s not really our logo is it? It looks like a guy sucking a dick and he’s got another dick tucked behind his ear for later, like a snack dick.”</p></blockquote>
<blockquote><p>“I half-jokingly said to Gilfoyle last night it looks like Richard’s gonna suck Erlich’s dick. But that would be reasonable compared to this.”</p></blockquote>
<blockquote><p>“You’re probably right, she just wanted to fuck a Danish.”</p></blockquote>
<blockquote><p>“I should not have eaten all that Satanist chicken”</p></blockquote>`;
});
const __vite_glob_2_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Dinesh_chugtai,
  metadata: metadata$4
}, Symbol.toStringTag, { value: "Module" }));
const metadata$3 = {
  "name": "Bertram Gilfoyle",
  "avatar": "/img/gilfoyle.jpg",
  "occupation": "VP of Architecture",
  "company": "Pied Piper",
  "email": "gilfoyle@piedpiper.com",
  "twitter": "https://twitter.com/b_gilfoyle",
  "linkedin": "https://www.linkedin.com/in/bertram-gilfoyle-11545a1b8/",
  "github": "https://github.com/piedpiper",
  "id": "gilfoyle"
};
const Gilfoyle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p>Bertram Gilfoyle (refered simply as Gilfoyle by most characters) is one of the main characters of Silicon Valley, appearing in every season of the show. Portayed by Martin Starr, Gilfoyle is a Canadian man living in the Silicon Valley area of Northern California, staying at Erlich Bachman’s Hacker Hostel and working for Pied Piper, which he was one of the founding members.</p>
<h3>Memorable Quotes</h3>
<blockquote><p>“What do I do? System Architecture. Networking and Security. No one in this house can touch me on that. But does anyone appreciate that? While you were busy minoring in gender studies and singing acapella at Sarah Lawrence, I was getting root access to NSA servers. I was a click away from starting a second Iranian revolution. I prevent cross site scripting, I monitor for DDoS attacks, emergency database rollbacks, and faulty transaction handlings. The internet, heard of it? Transfers half a petabyte of data a minute, do you have any idea how that happens? All of those YouPorn ones and zeros streaming directly to your shitty little smart phone day after day. Every dipshit who shits his pants if he can’t get the new dubstep Skrillex remix in under 12 seconds. It’s not magic, it’s talent and sweat. People like me ensuring your packets get delivered unsniffed. So what do I do? I make sure that one bad config on one key component doesn’t bankrupt the entire fucking company. That’s what the fuck I do.”</p></blockquote>
<blockquote><p>“Every day feels like I’ve died and gone to Hell.”</p></blockquote>`;
});
const __vite_glob_2_1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Gilfoyle,
  metadata: metadata$3
}, Symbol.toStringTag, { value: "Module" }));
const metadata$2 = {
  "name": "Richard Hendricks",
  "avatar": "/img/richard.png",
  "occupation": "CEO and Founder",
  "company": "Pied Piper",
  "email": "richard@piedpiper.com",
  "twitter": "https://twitter.com/ceoof_piedpiper",
  "linkedin": "https://www.linkedin.com/in/richard-hendricks-23524799/"
};
const Richard_hendricks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p>Richard Hendricks (played by Thomas Middleditch) was the CEO and founder of Pied Piper as well as PiperNet, and is currently a Gavin Belson Professor of Ethics in Technology at Stanford. Before founding Pied Piper, Richard was an employee of Hooli. At work he was often an antagonist to the brogrammers. While at Hooli, Richard worked on the Pied Piper algorithm. However, even though Richard created one line of code on the algorithm on a Hooli laptop which would mean that Pied Piper would be property of Hooli, Richard’s contract with Hooli was void due to a clause preventing him from leaving. Richard continued to work on Pied Piper until its demise, but still was involved with Pied Piper projects such as PiperChat and PiperNet until the company would be shut down in 2019.</p>
<h3>Memorable Quotes</h3>
<blockquote><p>I’d like for this company to be different than Hooli and Goolybib and all the rest, you know? Like, let’s not turn this into a corporate cult with bike meetings and voluntary retreats that are actually mandatory and claiming for the world to be a better place all the time.</p></blockquote>
<blockquote><p>“Let’s just think different. Don’t ‘think different,’ that’s Apple.”</p></blockquote>
<blockquote><p>“I always knew I was missing something, and then when someone explained the concept of ‘game’ I remember very distinctly thinking ‘That’s what I don’t have.”</p></blockquote>
<blockquote><p>“I’m okay as long as I don’t think about it.”</p></blockquote>`;
});
const __vite_glob_2_2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Richard_hendricks,
  metadata: metadata$2
}, Symbol.toStringTag, { value: "Module" }));
const metadata$1 = {
  "name": "tuean",
  "avatar": "/tuean.jpg",
  "occupation": "java developer",
  "company": "GJZQ",
  "email": "tuean_z@163.com",
  "twitter": null,
  "linkedin": null
};
const Tuean$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p>努力变成一个幽默的人 </p>
<h3>Memorable Quotes</h3>
<blockquote><p>为天地立心，为生命立命</p></blockquote>
<blockquote><p>为往圣继绝学，为天下开太平</p></blockquote>`;
});
const __vite_glob_2_3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Tuean$1,
  metadata: metadata$1
}, Symbol.toStringTag, { value: "Module" }));
const metadata = {
  "name": "钟啸天",
  "name_english": "tuean",
  "avatar": "/tuean.jpg",
  "occupation": "软件工程师",
  "company": "国金证券",
  "email": "tuean_z@163.com",
  "github": "https://github.com/tuean"
};
const Tuean = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3>联系方式</h3>
<p>手机号：13512184317</p>
<p>邮箱：<a href="mailto:tuean_z@163.com">tuean_z@163.com</a></p>
<p>微信：tt309279084</p>
<h3>工作经历</h3>
<h4>2019.7至今</h4>
<p>职位：国金证券-后台架构师</p>
<p>主要工作：</p>
<ul><li>负责b端iframe微前端平台，基于rbac模型提供平台级别鉴权、菜单权限、数据权限等基础功能；</li>
<li>构建B端运营与C端客户间业务桥梁，提供支持类、营销类、低代码平台；</li>
<li>负责公司级别问卷平台；</li>
<li>负责公司私域客户管理，打通企业微信平台，提供实时、准确的kyc信息、服务过程信息、聊天记录、关系标签等数据，支持私域客户运营；</li>
<li>负责公司内部客户流转平台，提供客户分配、流转、转化等功能；</li>
<li>负责组内基础组件开发支持，提供基础框架、接入包、二方包工具等；</li>
<li>智能外呼平台维护，二次封装供应商服务，提供简介，高效内部接口；</li></ul>
<h4>2012.4-2019.6</h4>
<p>职位：拉扎斯网络科技有限公司-高级Java工程师</p>
<p>主要工作：</p>
<ul><li>负责公司内部OA平台系统，提供公司内部日常办公支持；</li>
<li>负责公司内部toB工具项目，例如打卡、会议预定、社区、公众号、应用中心等业务应用；</li>
<li>负责公司招聘应用，包括招聘网站、内部推荐工具、招聘后台（HRBP）等组件构成完整招聘链路；</li>
<li>基于cancel构建人事数据同步服务，对外提供近实时基础人事类数据；</li>
<li>基于cloudera搭建hadoop实验性平台，oozie任务调度，sqoop数据搬运，对外提供presto、hive查询服务，vue2组装简单查询页面功能；</li></ul>`;
});
const __vite_glob_3_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Tuean,
  metadata
}, Symbol.toStringTag, { value: "Module" }));
const getPosts = () => {
  return Object.entries(/* @__PURE__ */ Object.assign({ "/content/posts/HttpMessageConverter.md": __vite_glob_0_0, "/content/posts/accessException.md": __vite_glob_0_1, "/content/posts/apollo重复key.md": __vite_glob_0_2, "/content/posts/chrome使用小技巧.md": __vite_glob_0_3, "/content/posts/ckeditor.md": __vite_glob_0_4, "/content/posts/cors-repeat.md": __vite_glob_0_5, "/content/posts/css-demo-star.md": __vite_glob_0_6, "/content/posts/daterangepicker-position-problem.md": __vite_glob_0_7, "/content/posts/dubbo-filter-config.md": __vite_glob_0_8, "/content/posts/fileReader-readAsDataUrl.md": __vite_glob_0_9, "/content/posts/hexo.md": __vite_glob_0_10, "/content/posts/html2canvas.md": __vite_glob_0_11, "/content/posts/idea启动失败.md": __vite_glob_0_12, "/content/posts/jvm-dns-cache.md": __vite_glob_0_13, "/content/posts/maven.md": __vite_glob_0_14, "/content/posts/pdf-xss.md": __vite_glob_0_15, "/content/posts/react-setState-problem.md": __vite_glob_0_16, "/content/posts/session-missing.md": __vite_glob_0_17, "/content/posts/shadowsocks.md": __vite_glob_0_18, "/content/posts/spring-pathPattern.md": __vite_glob_0_19, "/content/posts/tmp-tomcat.md": __vite_glob_0_20, "/content/posts/tools.md": __vite_glob_0_21, "/content/posts/watermark.md": __vite_glob_0_22, "/content/posts/webworker-reconnecting-websocket.md": __vite_glob_0_23, "/content/posts/windowsKnowlodge.md": __vite_glob_0_24, "/content/posts/一些常用的bash脚本.md": __vite_glob_0_25 }));
};
const getProjects = () => {
  return Object.entries(/* @__PURE__ */ Object.assign({ "/content/projects/piperchat.md": __vite_glob_1_0, "/content/projects/pipernet.md": __vite_glob_1_1, "/content/projects/the-box.md": __vite_glob_1_2, "/content/projects/the-platform.md": __vite_glob_1_3 }));
};
const getAuthors = () => {
  return Object.entries(/* @__PURE__ */ Object.assign({ "/content/authors/dinesh-chugtai.md": __vite_glob_2_0, "/content/authors/gilfoyle.md": __vite_glob_2_1, "/content/authors/richard-hendricks.md": __vite_glob_2_2, "/content/authors/tuean.md": __vite_glob_2_3 }));
};
const getResume = () => {
  return Object.entries(/* @__PURE__ */ Object.assign({ "/content/resume/tuean.md": __vite_glob_3_0 }));
};
const getEntriesByType = (entryType) => {
  switch (entryType) {
    case "posts":
      return getPosts();
    case "projects":
      return getProjects();
    case "authors":
      return getAuthors();
    case "resume":
      return getResume();
    default:
      throw new Error(`unknown entry type ${entryType}`);
  }
};
const getMetadata = (entryType, filepath, entry) => {
  return {
    ...entry.metadata,
    author: entryType === "posts" && !config.multiuser ? user.name : entry.metadata.author,
    content: entry.default.render().html,
    // generate the slug from the file path
    slug: filepath.replace(/(\/index)?\.md/, "").split("/").pop(),
    // twitter: entry.metadata.twitter
    // 	? entry.metadata.twitter.replace(/(http(s)?:\/\/)?((w){3}.)?twitter\.com\/?/, '')
    // 	: null,
    youtube: entry.metadata.video ? entry.metadata.video.replace(
      /(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)(\.com)?\/(watch\?v=)?/,
      ""
    ) : null,
    tag: entry.metadata.type?.split(" ").shift().toLowerCase() || null,
    tags: entry.metadata.tags || []
    // whether or not this file is `my-post.md` or `my-post/index.md`
    // (needed to do correct dynamic import in posts/[slug].svelte)
    // isIndexFile: filepath.endsWith('/index.md')
  };
};
const getEntries = (entryType) => {
  let entries = getEntriesByType(entryType);
  return entries.map(([filepath, entry]) => getMetadata(entryType, filepath, entry)).filter((entry) => !entry.draft).sort((a, b) => a.date < b.date ? 1 : -1).map((entry, index, allEntries) => ({
    ...entry,
    next: allEntries[index - 1],
    prev: allEntries[index + 1]
  }));
};
const getTags = () => {
  const posts = getEntries("posts");
  let tags = posts.flatMap(({ tags: tags2 }) => tags2).map((tag) => ({ text: tag, slug: slug(tag) })).reduce((arr, tag) => {
    let index = arr.findIndex((t) => t.slug === tag.slug);
    if (index > -1)
      arr[index].count++;
    else
      arr.push({ text: tag.text, slug: tag.slug, count: 1 });
    return arr;
  }, []).sort((a, b) => b.text < a.text ? 1 : -1);
  return tags;
};

export { getTags as a, getEntries as g, slug as s };
//# sourceMappingURL=entries-43f50aa4.js.map
